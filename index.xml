<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>BendThe-Curve</title>
<link>https://ram-polisetti.github.io/BendTheCurve/</link>
<atom:link href="https://ram-polisetti.github.io/BendTheCurve/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Wed, 20 Nov 2024 05:00:00 GMT</lastBuildDate>
<item>
  <title>Welcome to BendTheCurve</title>
  <dc:creator>Ram Polisetti</dc:creator>
  <link>https://ram-polisetti.github.io/BendTheCurve/posts/bend-the-curve-intro/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What is BendTheCurve?
</div>
</div>
<div class="callout-body-container callout-body">
<p>A learning platform where we break down complex data science and machine learning concepts into simple, understandable pieces. No PhD required! 🎓</p>
</div>
</div>
<section id="why-bendthecurve" class="level2">
<h2 class="anchored" data-anchor-id="why-bendthecurve">Why BendTheCurve?</h2>
<p>Have you ever: - Wondered how Netflix knows exactly what show you’ll like? 🎬 - Been curious about how self-driving cars work? 🚗 - Wanted to learn data science but felt overwhelmed? 📊</p>
<p>You’re in the right place! BendTheCurve is designed to make these fascinating topics accessible to everyone.</p>
</section>
<section id="what-well-cover" class="level2">
<h2 class="anchored" data-anchor-id="what-well-cover">What We’ll Cover</h2>
<section id="for-beginners" class="level3">
<h3 class="anchored" data-anchor-id="for-beginners">🌱 For Beginners</h3>
<ul>
<li><strong>Python Basics</strong>: Start from zero</li>
<li><strong>Data Analysis</strong>: Learn to tell stories with data</li>
<li><strong>Machine Learning 101</strong>: Build your first AI models</li>
</ul>
</section>
<section id="for-intermediate-learners" class="level3">
<h3 class="anchored" data-anchor-id="for-intermediate-learners">🚀 For Intermediate Learners</h3>
<ul>
<li><strong>Deep Learning</strong>: Understand neural networks</li>
<li><strong>Natural Language Processing</strong>: Make computers understand text</li>
<li><strong>Computer Vision</strong>: Teach machines to see</li>
</ul>
</section>
<section id="for-advanced-practitioners" class="level3">
<h3 class="anchored" data-anchor-id="for-advanced-practitioners">💡 For Advanced Practitioners</h3>
<ul>
<li><strong>Research Papers Explained</strong>: Latest developments in simple terms</li>
<li><strong>Industry Best Practices</strong>: Real-world applications</li>
<li><strong>Advanced Techniques</strong>: Cutting-edge methods</li>
</ul>
</section>
</section>
<section id="how-to-use-this-blog" class="level2">
<h2 class="anchored" data-anchor-id="how-to-use-this-blog">How to Use This Blog</h2>
<section id="start-with-the-fundamentals" class="level3">
<h3 class="anchored" data-anchor-id="start-with-the-fundamentals">1. Start with the Fundamentals</h3>
<p>Begin with our beginner-friendly series: - <a href="../../posts/ml-fundamentals-beginners">Machine Learning Fundamentals</a> - <a href="../../posts/python-data-science">Python for Data Science</a> - <a href="../../posts/statistics-basics">Statistics Made Simple</a></p>
</section>
<section id="choose-your-path" class="level3">
<h3 class="anchored" data-anchor-id="choose-your-path">2. Choose Your Path</h3>
<p>We’ve organized content into clear learning paths:</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning Paths
</div>
</div>
<div class="callout-body-container callout-body">
<p>🔰 <strong>Beginner Path</strong> 1. Python Basics 2. Data Analysis Fundamentals 3. Intro to Machine Learning</p>
<p>📚 <strong>Data Science Path</strong> 1. Statistical Methods 2. Data Visualization 3. Advanced Analytics</p>
<p>🤖 <strong>Machine Learning Path</strong> 1. ML Algorithms 2. Deep Learning 3. AI Applications</p>
</div>
</div>
</section>
<section id="practice-with-real-projects" class="level3">
<h3 class="anchored" data-anchor-id="practice-with-real-projects">3. Practice with Real Projects</h3>
<p>Every concept comes with: - 💻 Hands-on code examples - 🎯 Practice exercises - 🏗️ Project ideas</p>
</section>
</section>
<section id="what-makes-us-different" class="level2">
<h2 class="anchored" data-anchor-id="what-makes-us-different">What Makes Us Different</h2>
<ol type="1">
<li><strong>Simple Explanations</strong>
<ul>
<li>No unnecessary jargon</li>
<li>Real-world analogies</li>
<li>Visual learning aids</li>
</ul></li>
<li><strong>Practical Focus</strong>
<ul>
<li>Industry-relevant skills</li>
<li>Real-world examples</li>
<li>Ready-to-use code</li>
</ul></li>
<li><strong>Community Support</strong>
<ul>
<li>Active discussions</li>
<li>Question &amp; Answer sessions</li>
<li>Project sharing</li>
</ul></li>
</ol>
</section>
<section id="join-our-community" class="level2">
<h2 class="anchored" data-anchor-id="join-our-community">Join Our Community</h2>
<ul>
<li>💬 Comment on posts</li>
<li>🤝 Share your projects</li>
<li>📧 Subscribe to updates</li>
<li>🐦 Follow on Twitter</li>
</ul>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Getting Started
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Pick a learning path that matches your level</li>
<li>Start with the fundamentals</li>
<li>Practice with provided examples</li>
<li>Join the discussion</li>
</ol>
</div>
</div>
</section>
<section id="coming-up-next" class="level2">
<h2 class="anchored" data-anchor-id="coming-up-next">Coming Up Next</h2>
<p>Here’s what we’re working on: - 📊 Data Visualization Masterclass - 🤖 Building Your First Neural Network - 📱 Machine Learning for Mobile Apps</p>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<section id="tools-well-use" class="level3">
<h3 class="anchored" data-anchor-id="tools-well-use">🛠️ Tools We’ll Use</h3>
<ul>
<li>Python</li>
<li>Jupyter Notebooks</li>
<li>Popular ML Libraries</li>
</ul>
</section>
<section id="recommended-reading" class="level3">
<h3 class="anchored" data-anchor-id="recommended-reading">📚 Recommended Reading</h3>
<ul>
<li>Free online resources</li>
<li>Book recommendations</li>
<li>Research papers explained</li>
</ul>
</section>
<section id="practice-materials" class="level3">
<h3 class="anchored" data-anchor-id="practice-materials">💻 Practice Materials</h3>
<ul>
<li>Datasets</li>
<li>Code templates</li>
<li>Project starters</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Remember
</div>
</div>
<div class="callout-body-container callout-body">
<p>Everyone starts somewhere! Don’t feel overwhelmed - we’ll break everything down into manageable pieces.</p>
</div>
</div>
<p>Let’s start this exciting journey together! Choose your first article from the learning paths above, or check out our <a href="../../posts">latest posts</a>.</p>
<p>Happy Learning! 🚀</p>


</section>
</section>

 ]]></description>
  <category>welcome</category>
  <category>introduction</category>
  <guid>https://ram-polisetti.github.io/BendTheCurve/posts/bend-the-curve-intro/</guid>
  <pubDate>Wed, 20 Nov 2024 05:00:00 GMT</pubDate>
  <media:content url="https://ram-polisetti.github.io/BendTheCurve/posts/bend-the-curve-intro/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Advanced Neural Network Architectures: A Technical Deep Dive</title>
  <dc:creator>Ram Polisetti</dc:creator>
  <link>https://ram-polisetti.github.io/BendTheCurve/posts/advanced-neural-architectures/</link>
  <description><![CDATA[ 





<p>listing: contents: “../**/index.qmd” type: default fields: [title, description, date, author] sort: “date desc” max-items: 2 filter-ui: false categories: false include-in-header: false feed: true date-format: “MMMM D, YYYY”</p>
<hr>
<p>::: :::</p>



 ]]></description>
  <category>deep-learning</category>
  <category>neural-networks</category>
  <category>architectures</category>
  <category>mathematics</category>
  <guid>https://ram-polisetti.github.io/BendTheCurve/posts/advanced-neural-architectures/</guid>
  <pubDate>Tue, 19 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://ram-polisetti.github.io/BendTheCurve/posts/advanced-neural-architectures/neural_architectures.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Causal Inference and Structural Learning</title>
  <dc:creator>Ram Polisetti</dc:creator>
  <link>https://ram-polisetti.github.io/BendTheCurve/posts/causal-inference/</link>
  <description><![CDATA[ 





<p>listing: contents: “../**/index.qmd” type: default fields: [title, description, date, author] sort: “date desc” max-items: 2 filter-ui: false categories: false include-in-header: false feed: true date-format: “MMMM D, YYYY”</p>
<hr>
<p>::: :::</p>



 ]]></description>
  <category>machine-learning</category>
  <category>causality</category>
  <category>statistics</category>
  <category>mathematics</category>
  <guid>https://ram-polisetti.github.io/BendTheCurve/posts/causal-inference/</guid>
  <pubDate>Tue, 19 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://ram-polisetti.github.io/BendTheCurve/posts/causal-inference/causal_inference.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Deep Learning: The Technology Behind AI’s Recent Breakthroughs</title>
  <dc:creator>Ram Polisetti</dc:creator>
  <link>https://ram-polisetti.github.io/BendTheCurve/posts/deep-learning-beginners/</link>
  <description><![CDATA[ 





<p>The first time I encountered deep learning, I was amazed by its ability to solve problems that seemed impossible just a few years ago. From beating world champions at complex games to generating art that could pass for human-made, deep learning has transformed the landscape of artificial intelligence. But what makes this technology so powerful, and how does it actually work?</p>
<section id="the-brain-inspired-technology" class="level2">
<h2 class="anchored" data-anchor-id="the-brain-inspired-technology">The Brain-Inspired Technology</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Key Insight
</div>
</div>
<div class="callout-body-container callout-body">
<p>Deep learning is inspired by how our brains work, but it’s a simplified model. Understanding this connection helps grasp the basic concepts more intuitively.</p>
</div>
</div>
<p>Think of it like this: - Your brain has billions of neurons working together to help you recognize faces, understand speech, and make decisions - Each neuron is like a tiny processor, taking in information and deciding whether to pass it on - Deep learning creates artificial versions of these networks to solve complex problems</p>
<p>Let’s break it down with a simple example:</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Real-World Example: Face Recognition
</div>
</div>
<div class="callout-body-container callout-body">
<p>When you see a friend’s face: 1. Your eyes capture the image (Input Layer) 2. Your brain processes features like eyes, nose, mouth (Hidden Layers) 3. You recognize who it is (Output Layer)</p>
<p>A deep learning system works similarly!</p>
</div>
</div>
</section>
<section id="neural-networks-explained" class="level2">
<h2 class="anchored" data-anchor-id="neural-networks-explained">Neural Networks Explained</h2>
<section id="the-basic-building-block-neurons" class="level3">
<h3 class="anchored" data-anchor-id="the-basic-building-block-neurons">1. The Basic Building Block: Neurons</h3>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true" aria-current="page">Concept</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Python Example</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p>An artificial neuron is like a simple calculator that: - Takes inputs (like numbers from 0 to 1) - Weighs their importance - Makes a decision based on the total</p>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> simple_neuron(inputs, weights):</span>
<span id="cb1-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Multiply inputs by weights and sum them up</span></span>
<span id="cb1-5">    total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.dot(inputs, weights)</span>
<span id="cb1-6">    </span>
<span id="cb1-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Decision function (activation)</span></span>
<span id="cb1-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb1-11">inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input values</span></span>
<span id="cb1-12">weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># How important each input is</span></span>
<span id="cb1-13"></span>
<span id="cb1-14">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simple_neuron(inputs, weights)</span>
<span id="cb1-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Neuron output: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="layers-of-neurons" class="level3">
<h3 class="anchored" data-anchor-id="layers-of-neurons">2. Layers of Neurons</h3>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Understanding Network Depth
</div>
</div>
<div class="callout-body-container callout-body">
<p>The “deep” in deep learning comes from having multiple layers. Each layer: - Learns different levels of features - Builds upon previous layers - Increases the network’s ability to learn complex patterns</p>
</div>
</div>
<p>Let’s visualize it:</p>
<pre><code>Input → [Layer 1] → [Layer 2] → [Layer 3] → Output
      ↑          ↑          ↑          ↑
Basic     Simple     Complex    Final
Data    Patterns   Features   Decision</code></pre>
</section>
</section>
<section id="practical-deep-learning" class="level2">
<h2 class="anchored" data-anchor-id="practical-deep-learning">Practical Deep Learning</h2>
<section id="your-first-neural-network" class="level3">
<h3 class="anchored" data-anchor-id="your-first-neural-network">1. Your First Neural Network</h3>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Code</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Explanation</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> keras</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a simple neural network</span></span>
<span id="cb3-5">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Sequential([</span>
<span id="cb3-6">    keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, input_shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,)),</span>
<span id="cb3-7">    keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>),</span>
<span id="cb3-8">    keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigmoid'</span>)</span>
<span id="cb3-9">])</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example data</span></span>
<span id="cb3-12">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>],</span>
<span id="cb3-13">              [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>]])</span>
<span id="cb3-14">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train the model</span></span>
<span id="cb3-17">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adam'</span>, loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>)</span>
<span id="cb3-18">model.fit(X, y, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<p>This code: 1. Creates a 3-layer neural network 2. Takes 3 numbers as input 3. Processes them through 2 hidden layers 4. Makes a yes/no prediction</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Common Pitfalls
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Don’t use too many layers for simple problems</li>
<li>Start with small networks and grow as needed</li>
<li>Always split your data into training and testing sets</li>
</ul>
</div>
</div>
</section>
</section>
<section id="how-neural-networks-learn" class="level2">
<h2 class="anchored" data-anchor-id="how-neural-networks-learn">How Neural Networks Learn</h2>
<section id="the-learning-process" class="level3">
<h3 class="anchored" data-anchor-id="the-learning-process">1. The Learning Process</h3>
<p>Like learning to ride a bike: 1. Try something 2. See how well it works 3. Adjust based on mistakes 4. Try again 5. Get better over time</p>
</section>
<section id="training-steps" class="level3">
<h3 class="anchored" data-anchor-id="training-steps">2. Training Steps</h3>
<ol type="1">
<li>Forward Pass:
<ul>
<li>Data flows through the network</li>
<li>Network makes a prediction</li>
<li>Like making a guess</li>
</ul></li>
<li>Error Calculation:
<ul>
<li>Compare prediction with truth</li>
<li>Calculate how wrong it was</li>
<li>Like measuring mistakes</li>
</ul></li>
<li>Backward Pass:
<ul>
<li>Adjust weights based on errors</li>
<li>Like learning from mistakes</li>
<li>Small improvements each time</li>
</ul></li>
</ol>
</section>
</section>
<section id="types-of-neural-networks" class="level2">
<h2 class="anchored" data-anchor-id="types-of-neural-networks">Types of Neural Networks</h2>
<section id="feedforward-networks" class="level3">
<h3 class="anchored" data-anchor-id="feedforward-networks">1. Feedforward Networks</h3>
<p>The simplest type: - Information flows one way - Good for basic patterns - Like classifying images - Example: Identifying numbers</p>
</section>
<section id="convolutional-networks-cnns" class="level3">
<h3 class="anchored" data-anchor-id="convolutional-networks-cnns">2. Convolutional Networks (CNNs)</h3>
<p>Specialized for images: - Look at small parts at a time - Combine information - Find patterns in images - Example: Face recognition</p>
</section>
<section id="recurrent-networks-rnns" class="level3">
<h3 class="anchored" data-anchor-id="recurrent-networks-rnns">3. Recurrent Networks (RNNs)</h3>
<p>Good for sequences: - Remember previous information - Process data over time - Good for text and speech - Example: Translation</p>
</section>
</section>
<section id="common-applications" class="level2">
<h2 class="anchored" data-anchor-id="common-applications">Common Applications</h2>
<section id="computer-vision" class="level3">
<h3 class="anchored" data-anchor-id="computer-vision">1. Computer Vision</h3>
<p>What it can do: - Recognize objects - Detect faces - Read text - Find patterns in images</p>
<p>Real Examples: - Face ID on phones - Medical image analysis - Self-driving cars - Security cameras</p>
</section>
<section id="natural-language" class="level3">
<h3 class="anchored" data-anchor-id="natural-language">2. Natural Language</h3>
<p>Understanding text: - Translation - Summarization - Question answering - Text generation</p>
<p>Real Examples: - Google Translate - Chatbots - Voice assistants - Email filters</p>
</section>
<section id="speech-processing" class="level3">
<h3 class="anchored" data-anchor-id="speech-processing">3. Speech Processing</h3>
<p>Working with audio: - Speech recognition - Voice synthesis - Language translation - Music generation</p>
<p>Real Examples: - Siri/Alexa - Transcription services - Voice assistants - Music recommendations</p>
</section>
</section>
<section id="how-deep-learning-works" class="level2">
<h2 class="anchored" data-anchor-id="how-deep-learning-works">How Deep Learning Works</h2>
<section id="feature-learning" class="level3">
<h3 class="anchored" data-anchor-id="feature-learning">1. Feature Learning</h3>
<p>Automatic pattern finding: - Low-level features (edges, colors) - Mid-level features (shapes, textures) - High-level features (objects, concepts)</p>
<p>Example in Vision: 1. First layer sees edges 2. Next layer combines edges into shapes 3. Final layers recognize objects</p>
</section>
<section id="representation-learning" class="level3">
<h3 class="anchored" data-anchor-id="representation-learning">2. Representation Learning</h3>
<p>Building understanding: - Converts raw data to useful form - Learns important characteristics - Creates meaningful representations</p>
<p>Example in Text: 1. Words to numbers 2. Understanding context 3. Capturing meaning</p>
</section>
<section id="deep-learning-vs-traditional-ml" class="level3">
<h3 class="anchored" data-anchor-id="deep-learning-vs-traditional-ml">3. Deep Learning vs Traditional ML</h3>
<p>Key differences: - Automatic feature extraction - Multiple layers of processing - Better with large datasets - More complex patterns</p>
</section>
</section>
<section id="important-concepts" class="level2">
<h2 class="anchored" data-anchor-id="important-concepts">Important Concepts</h2>
<section id="training-data" class="level3">
<h3 class="anchored" data-anchor-id="training-data">1. Training Data</h3>
<p>What’s needed: - Large amounts of data - Good quality examples - Diverse cases - Clear labels (for supervised learning)</p>
</section>
<section id="computing-power" class="level3">
<h3 class="anchored" data-anchor-id="computing-power">2. Computing Power</h3>
<p>Requirements: - Powerful processors (GPUs) - Lots of memory - Long training times - Efficient algorithms</p>
</section>
<section id="model-architecture" class="level3">
<h3 class="anchored" data-anchor-id="model-architecture">3. Model Architecture</h3>
<p>Design choices: - Number of layers - Types of layers - Connection patterns - Activation functions</p>
</section>
</section>
<section id="common-challenges" class="level2">
<h2 class="anchored" data-anchor-id="common-challenges">Common Challenges</h2>
<section id="data-issues" class="level3">
<h3 class="anchored" data-anchor-id="data-issues">1. Data Issues</h3>
<p>Common problems: - Not enough data - Poor quality data - Biased data - Inconsistent labels</p>
</section>
<section id="training-problems" class="level3">
<h3 class="anchored" data-anchor-id="training-problems">2. Training Problems</h3>
<p>Typical issues: - Long training times - Unstable training - Overfitting - Resource limitations</p>
</section>
<section id="deployment-challenges" class="level3">
<h3 class="anchored" data-anchor-id="deployment-challenges">3. Deployment Challenges</h3>
<p>Real-world issues: - Model size - Computation needs - Integration - Maintenance</p>
</section>
</section>
<section id="best-practices" class="level2">
<h2 class="anchored" data-anchor-id="best-practices">Best Practices</h2>
<section id="start-simple" class="level3">
<h3 class="anchored" data-anchor-id="start-simple">1. Start Simple</h3>
<p>Basic approach: - Use proven architectures - Start with small models - Understand the basics - Build complexity gradually</p>
</section>
<section id="data-preparation" class="level3">
<h3 class="anchored" data-anchor-id="data-preparation">2. Data Preparation</h3>
<p>Key steps: - Clean your data - Normalize inputs - Handle missing values - Balance datasets</p>
</section>
<section id="model-development" class="level3">
<h3 class="anchored" data-anchor-id="model-development">3. Model Development</h3>
<p>Good habits: - Start with baselines - Experiment systematically - Document everything - Test thoroughly</p>
</section>
</section>
<section id="getting-started" class="level2">
<h2 class="anchored" data-anchor-id="getting-started">Getting Started</h2>
<section id="prerequisites" class="level3">
<h3 class="anchored" data-anchor-id="prerequisites">1. Prerequisites</h3>
<p>What you need: - Python programming - Basic math - Machine learning basics - Development tools</p>
</section>
<section id="learning-path" class="level3">
<h3 class="anchored" data-anchor-id="learning-path">2. Learning Path</h3>
<p>Steps to follow: 1. Learn Python 2. Study ML basics 3. Understand neural networks 4. Practice with frameworks</p>
</section>
<section id="tools-and-frameworks" class="level3">
<h3 class="anchored" data-anchor-id="tools-and-frameworks">3. Tools and Frameworks</h3>
<p>Popular options: - PyTorch - TensorFlow - Keras - Fast.ai</p>
</section>
</section>
<section id="projects-to-try" class="level2">
<h2 class="anchored" data-anchor-id="projects-to-try">Projects to Try</h2>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Hands-On Learning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Start with these beginner-friendly projects: 1. <strong>Image Classification</strong>: Identify handwritten digits using MNIST dataset 2. <strong>Text Classification</strong>: Build a simple sentiment analyzer 3. <strong>Prediction</strong>: Create a basic price prediction model</p>
</div>
</div>
<section id="resources-for-learning" class="level3">
<h3 class="anchored" data-anchor-id="resources-for-learning">Resources for Learning</h3>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">Online Courses</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">Books</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-3" aria-controls="tabset-3-3" aria-selected="false">Tools</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<ul>
<li>Fast.ai - Practical Deep Learning for Coders</li>
<li>Coursera - Deep Learning Specialization</li>
<li>TensorFlow’s Official Tutorials</li>
</ul>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<ul>
<li>“Deep Learning with Python” by François Chollet</li>
<li>“Grokking Deep Learning” by Andrew Trask</li>
</ul>
</div>
<div id="tabset-3-3" class="tab-pane" aria-labelledby="tabset-3-3-tab">
<ul>
<li>Google Colab (free GPU access)</li>
<li>TensorFlow and Keras</li>
<li>PyTorch</li>
</ul>
</div>
</div>
</div>
<p>Remember: Deep learning is powerful but requires patience to learn. Start with simple concepts, practice regularly, and gradually tackle more complex topics. Focus on understanding rather than memorizing, and always experiment with code to reinforce your learning.</p>


</section>
</section>

 ]]></description>
  <category>deep-learning</category>
  <category>neural-networks</category>
  <category>beginner</category>
  <guid>https://ram-polisetti.github.io/BendTheCurve/posts/deep-learning-beginners/</guid>
  <pubDate>Tue, 19 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://ram-polisetti.github.io/BendTheCurve/posts/deep-learning-beginners/deep_learning.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Generative Models: Mathematical Foundations and Architectures</title>
  <dc:creator>Ram Polisetti</dc:creator>
  <link>https://ram-polisetti.github.io/BendTheCurve/posts/generative-models/</link>
  <description><![CDATA[ 





<p>listing: contents: “../**/index.qmd” type: default fields: [title, description, date, author] sort: “date desc” max-items: 2 filter-ui: false categories: false include-in-header: false feed: true date-format: “MMMM D, YYYY”</p>
<hr>
<p>::: :::</p>



 ]]></description>
  <category>machine-learning</category>
  <category>generative-models</category>
  <category>deep-learning</category>
  <category>mathematics</category>
  <guid>https://ram-polisetti.github.io/BendTheCurve/posts/generative-models/</guid>
  <pubDate>Tue, 19 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://ram-polisetti.github.io/BendTheCurve/posts/generative-models/generative_models.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Information Theory in Machine Learning: A Practical Guide</title>
  <dc:creator>Ram Polisetti</dc:creator>
  <link>https://ram-polisetti.github.io/BendTheCurve/posts/information-theory-ml/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What You’ll Learn
</div>
</div>
<div class="callout-body-container callout-body">
<p>By the end of this guide, you’ll understand: - How information is measured in machine learning - Why entropy matters in data science - How to use information theory for feature selection - Practical applications in deep learning</p>
</div>
</div>
<section id="information-theory-in-machine-learning" class="level1">
<h1>Information Theory in Machine Learning</h1>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Real-World Analogy
</div>
</div>
<div class="callout-body-container callout-body">
<p>Think of information theory like measuring surprise: - Rare events (low probability) = More surprising = More information - Common events (high probability) = Less surprising = Less information</p>
</div>
</div>
<section id="understanding-information-theory-through-examples" class="level2">
<h2 class="anchored" data-anchor-id="understanding-information-theory-through-examples">Understanding Information Theory Through Examples</h2>
<p>Let’s start with a practical example:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true" aria-current="page">Code</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Explanation</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> entropy</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_entropy(probabilities):</span>
<span id="cb1-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Calculate Shannon entropy of a probability distribution"""</span></span>
<span id="cb1-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(probabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log2(probabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-10</span>))</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example: Fair vs Loaded Dice</span></span>
<span id="cb1-11">fair_die <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fair die probabilities</span></span>
<span id="cb1-12">loaded_die <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loaded die probabilities</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Fair Die Entropy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>calculate_entropy(fair_die)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> bits"</span>)</span>
<span id="cb1-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Loaded Die Entropy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>calculate_entropy(loaded_die)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> bits"</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize probabilities and entropy</span></span>
<span id="cb1-18">fig, (ax1, ax2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot probability distributions</span></span>
<span id="cb1-21">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb1-22">width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.35</span></span>
<span id="cb1-23">ax1.bar(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, fair_die, width, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fair Die'</span>)</span>
<span id="cb1-24">ax1.bar(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, loaded_die, width, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loaded Die'</span>)</span>
<span id="cb1-25">ax1.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Outcome'</span>)</span>
<span id="cb1-26">ax1.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probability'</span>)</span>
<span id="cb1-27">ax1.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probability Distributions'</span>)</span>
<span id="cb1-28">ax1.legend()</span>
<span id="cb1-29"></span>
<span id="cb1-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot entropy comparison</span></span>
<span id="cb1-31">entropies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [calculate_entropy(fair_die), calculate_entropy(loaded_die)]</span>
<span id="cb1-32">ax2.bar([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fair Die'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loaded Die'</span>], entropies)</span>
<span id="cb1-33">ax2.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Entropy (bits)'</span>)</span>
<span id="cb1-34">ax2.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Entropy Comparison'</span>)</span>
<span id="cb1-35"></span>
<span id="cb1-36">plt.tight_layout()</span>
<span id="cb1-37">plt.show()</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>This example shows how entropy measures uncertainty: - Fair die: Maximum uncertainty = Higher entropy - Loaded die: More predictable = Lower entropy - Entropy quantifies the average “surprise” in the distribution</p>
</div>
</div>
</div>
</section>
<section id="fundamental-concepts" class="level2">
<h2 class="anchored" data-anchor-id="fundamental-concepts">Fundamental Concepts</h2>
<section id="shannon-entropy-measuring-uncertainty" class="level3">
<h3 class="anchored" data-anchor-id="shannon-entropy-measuring-uncertainty">1. Shannon Entropy: Measuring Uncertainty</h3>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Key Insight
</div>
</div>
<div class="callout-body-container callout-body">
<p>Entropy measures the average amount of surprise or uncertainty in a random variable. Higher entropy means more unpredictable outcomes.</p>
</div>
</div>
<p>Let’s visualize how entropy changes with probability:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_binary_entropy():</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Plot entropy of a binary event"""</span></span>
<span id="cb2-3">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb2-4">    H <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log2(p) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>p) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>p))</span>
<span id="cb2-5">    </span>
<span id="cb2-6">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb2-7">    plt.plot(p, H)</span>
<span id="cb2-8">    plt.fill_between(p, H, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb2-9">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probability of Event'</span>)</span>
<span id="cb2-10">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Entropy (bits)'</span>)</span>
<span id="cb2-11">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Binary Entropy Function'</span>)</span>
<span id="cb2-12">    plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-13">    plt.show()</span>
<span id="cb2-14"></span>
<span id="cb2-15">plot_binary_entropy()</span></code></pre></div>
</section>
<section id="mutual-information-measuring-relationships" class="level3">
<h3 class="anchored" data-anchor-id="mutual-information-measuring-relationships">2. Mutual Information: Measuring Relationships</h3>
<p>Let’s implement a practical example of mutual information for feature selection:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Code</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Visualization</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> make_classification</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.feature_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mutual_info_classif</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate synthetic dataset</span></span>
<span id="cb3-5">X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_classification(n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, n_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, n_informative<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb3-6">                         n_redundant<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, n_repeated<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb3-7">                         random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate mutual information</span></span>
<span id="cb3-10">mi_scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mutual_info_classif(X, y)</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot feature importance</span></span>
<span id="cb3-13">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb3-14">plt.bar(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(mi_scores)), mi_scores)</span>
<span id="cb3-15">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Feature Index'</span>)</span>
<span id="cb3-16">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mutual Information'</span>)</span>
<span id="cb3-17">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Feature Importance using Mutual Information'</span>)</span>
<span id="cb3-18">plt.show()</span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select top features</span></span>
<span id="cb3-21">top_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argsort(mi_scores)[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:]</span>
<span id="cb3-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top 5 most informative features:"</span>, top_features)</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_feature_relationship(X, y, feature_idx):</span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Visualize relationship between feature and target"""</span></span>
<span id="cb4-3">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb4-4">    </span>
<span id="cb4-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot distributions</span></span>
<span id="cb4-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> class_label <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]:</span>
<span id="cb4-7">        sns.kdeplot(X[y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> class_label, feature_idx], </span>
<span id="cb4-8">                   label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Class </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>class_label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb4-9">    </span>
<span id="cb4-10">    plt.xlabel(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Feature </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>feature_idx<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Value'</span>)</span>
<span id="cb4-11">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Density'</span>)</span>
<span id="cb4-12">    plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Feature </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>feature_idx<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Distribution by Class'</span>)</span>
<span id="cb4-13">    plt.legend()</span>
<span id="cb4-14">    plt.show()</span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize top feature</span></span>
<span id="cb4-17">plot_feature_relationship(X, y, top_features[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="kl-divergence-comparing-distributions" class="level3">
<h3 class="anchored" data-anchor-id="kl-divergence-comparing-distributions">3. KL Divergence: Comparing Distributions</h3>
<p>Let’s visualize KL divergence between different distributions:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_kl_divergence():</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Visualize KL divergence between Gaussians"""</span></span>
<span id="cb5-3">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb5-4">    </span>
<span id="cb5-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create two Gaussian distributions</span></span>
<span id="cb5-6">    mu1, sigma1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-7">    mu2, sigma2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span></span>
<span id="cb5-8">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu1)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sigma1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (sigma1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.pi))</span>
<span id="cb5-9">    q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sigma2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (sigma2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.pi))</span>
<span id="cb5-10">    </span>
<span id="cb5-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate KL divergence</span></span>
<span id="cb5-12">    kl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>q)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb5-13">    </span>
<span id="cb5-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot</span></span>
<span id="cb5-15">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb5-16">    plt.plot(x, p, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P(x)'</span>)</span>
<span id="cb5-17">    plt.plot(x, q, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Q(x)'</span>)</span>
<span id="cb5-18">    plt.fill_between(x, p, q, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb5-19">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb5-20">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probability Density'</span>)</span>
<span id="cb5-21">    plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'KL(P||Q) = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>kl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb5-22">    plt.legend()</span>
<span id="cb5-23">    plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-24">    plt.show()</span>
<span id="cb5-25"></span>
<span id="cb5-26">plot_kl_divergence()</span></code></pre></div>
</section>
</section>
<section id="applications-in-machine-learning" class="level2">
<h2 class="anchored" data-anchor-id="applications-in-machine-learning">Applications in Machine Learning</h2>
<section id="information-bottleneck-in-deep-learning" class="level3">
<h3 class="anchored" data-anchor-id="information-bottleneck-in-deep-learning">1. Information Bottleneck in Deep Learning</h3>
<p>Let’s visualize the information plane:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_information_plane():</span>
<span id="cb6-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Visualize Information Bottleneck principle"""</span></span>
<span id="cb6-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate layer-wise mutual information</span></span>
<span id="cb6-4">    layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb6-5">    I_X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I(T;X)</span></span>
<span id="cb6-6">    I_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.95</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I(T;Y)</span></span>
<span id="cb6-7">    </span>
<span id="cb6-8">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb6-9">    plt.scatter(I_X, I_Y, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>layers, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb6-10">    </span>
<span id="cb6-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add arrows to show progression</span></span>
<span id="cb6-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(layers)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb6-13">        plt.arrow(I_X[i], I_Y[i], I_X[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>I_X[i], I_Y[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>I_Y[i],</span>
<span id="cb6-14">                 head_width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, head_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, fc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>, ec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>)</span>
<span id="cb6-15">    </span>
<span id="cb6-16">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'I(T;X) - Information about input'</span>)</span>
<span id="cb6-17">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'I(T;Y) - Information about output'</span>)</span>
<span id="cb6-18">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Information Plane Dynamics'</span>)</span>
<span id="cb6-19">    plt.colorbar(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Layer'</span>)</span>
<span id="cb6-20">    plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-21">    plt.show()</span>
<span id="cb6-22"></span>
<span id="cb6-23">plot_information_plane()</span></code></pre></div>
</section>
<section id="cross-entropy-loss-in-neural-networks" class="level3">
<h3 class="anchored" data-anchor-id="cross-entropy-loss-in-neural-networks">2. Cross-Entropy Loss in Neural Networks</h3>
<p>Let’s implement and visualize cross-entropy loss:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">Implementation</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">Visualization</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cross_entropy_loss(y_true, y_pred):</span>
<span id="cb7-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Calculate cross-entropy loss"""</span></span>
<span id="cb7-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(y_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log(y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-10</span>))</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example with binary classification</span></span>
<span id="cb7-6">y_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb7-7">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>])</span>
<span id="cb7-8"></span>
<span id="cb7-9">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cross_entropy_loss(y_true, y_pred)</span>
<span id="cb7-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Cross-Entropy Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_cross_entropy():</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Visualize cross-entropy loss"""</span></span>
<span id="cb8-3">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb8-4">    ce_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>p)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loss when true label is 0</span></span>
<span id="cb8-5">    ce_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.log(p)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loss when true label is 1</span></span>
<span id="cb8-6">    </span>
<span id="cb8-7">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb8-8">    plt.plot(p, ce_0, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'True Label = 0'</span>)</span>
<span id="cb8-9">    plt.plot(p, ce_1, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'True Label = 1'</span>)</span>
<span id="cb8-10">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted Probability'</span>)</span>
<span id="cb8-11">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cross-Entropy Loss'</span>)</span>
<span id="cb8-12">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cross-Entropy Loss vs Predicted Probability'</span>)</span>
<span id="cb8-13">    plt.legend()</span>
<span id="cb8-14">    plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-15">    plt.show()</span>
<span id="cb8-16"></span>
<span id="cb8-17">plot_cross_entropy()</span></code></pre></div>
</div>
</div>
</div>
</section>
</section>
<section id="best-practices-and-common-pitfalls" class="level2">
<h2 class="anchored" data-anchor-id="best-practices-and-common-pitfalls">Best Practices and Common Pitfalls</h2>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Watch Out For
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><strong>Numerical Stability</strong>
<ul>
<li>Always add small epsilon to log</li>
<li>Use stable implementations</li>
</ul></li>
<li><strong>Distribution Assumptions</strong>
<ul>
<li>Check if data matches assumptions</li>
<li>Consider data transformations</li>
</ul></li>
<li><strong>Interpretation</strong>
<ul>
<li>Entropy is relative to features</li>
<li>MI doesn’t imply causation</li>
</ul></li>
</ol>
</div>
</div>
</section>
<section id="practical-tips" class="level2">
<h2 class="anchored" data-anchor-id="practical-tips">Practical Tips</h2>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
For Better Results
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><strong>Feature Selection</strong>
<ul>
<li>Use MI for initial screening</li>
<li>Combine with other methods</li>
</ul></li>
<li><strong>Model Evaluation</strong>
<ul>
<li>Monitor information flow</li>
<li>Use cross-entropy properly</li>
</ul></li>
<li><strong>Distribution Matching</strong>
<ul>
<li>Start with simpler metrics</li>
<li>Progress to KL/JS divergence</li>
</ul></li>
</ol>
</div>
</div>
</section>
<section id="further-reading" class="level2">
<h2 class="anchored" data-anchor-id="further-reading">Further Reading</h2>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">Books</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false">Online Resources</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-3" aria-controls="tabset-4-3" aria-selected="false">Tools</a></li></ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<ul>
<li>“Elements of Information Theory” by Cover &amp; Thomas</li>
<li>“Information Theory, Inference, and Learning Algorithms” by MacKay</li>
<li>“Deep Learning” by Goodfellow et al.&nbsp;(Chapter 3)</li>
</ul>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<ul>
<li>Information Theory Course (Stanford)</li>
<li>Deep Learning Information Theory Blog</li>
<li>PyTorch Documentation on Losses</li>
</ul>
</div>
<div id="tabset-4-3" class="tab-pane" aria-labelledby="tabset-4-3-tab">
<ul>
<li>scipy.stats.entropy</li>
<li>sklearn.feature_selection</li>
<li>tensorflow.keras.losses</li>
</ul>
</div>
</div>
</div>
</section>
<section id="related-posts" class="level2">
<h2 class="anchored" data-anchor-id="related-posts">Related Posts</h2>
</section>
<section id="continue-your-learning-journey" class="level2 related-posts-section">
<h2 class="anchored" data-anchor-id="continue-your-learning-journey">Continue Your Learning Journey</h2>
<div id="related-posts">

</div>
</section>
<p>Remember: Information theory provides powerful tools for understanding and improving machine learning models. Start with simple concepts and gradually build up to more complex applications!</p>


</section>

 ]]></description>
  <category>machine-learning</category>
  <category>information-theory</category>
  <category>mathematics</category>
  <category>theory</category>
  <guid>https://ram-polisetti.github.io/BendTheCurve/posts/information-theory-ml/</guid>
  <pubDate>Tue, 19 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://ram-polisetti.github.io/BendTheCurve/posts/information-theory-ml/information_theory.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Machine Learning: A Beginner’s Guide</title>
  <dc:creator>Ram Polisetti</dc:creator>
  <link>https://ram-polisetti.github.io/BendTheCurve/posts/ml-fundamentals-beginners/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What You’ll Learn
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><p>Understand machine learning in simple, everyday terms</p></li>
<li><p>Write your first machine learning code (no experience needed!)</p></li>
<li><p>Learn how Netflix, Spotify, and other apps use ML</p></li>
<li><p>Build real working models step by step</p></li>
</ul>
</div>
</div>
<section id="introduction-what-is-machine-learning-really" class="level2">
<h2 class="anchored" data-anchor-id="introduction-what-is-machine-learning-really">Introduction: What is Machine Learning, Really?</h2>
<p>Imagine teaching a child to recognize a cat: - You don’t give them a mathematical formula for “cat-ness”</p>
<ul>
<li><p>You don’t list out exact measurements for ears, whiskers, and tail</p></li>
<li><p>Instead, you show them lots of cat pictures</p></li>
</ul>
<p>This is exactly how machine learning works! Instead of writing strict rules, we show computers lots of examples and let them learn patterns.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Quick Examples You Already Know
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><p>📧 Gmail knowing which emails are spam</p></li>
<li><p>🎵 Spotify suggesting songs you might like</p></li>
<li><p>📱 Face ID unlocking your phone</p></li>
<li><p>🛒 Amazon recommending products</p></li>
</ul>
<p>All of these use machine learning!</p>
</div>
</div>
</section>
<section id="prerequisites-what-you-need-to-know" class="level2">
<h2 class="anchored" data-anchor-id="prerequisites-what-you-need-to-know">Prerequisites: What You Need to Know</h2>
<p>Don’t worry if you’re new to programming! We’ll explain everything step by step. You’ll need:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># These are the tools we'll use - think of them as our ML workshop tools</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For working with numbers</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For organizing data</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For making charts</span></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For splitting our data</span></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LinearRegression    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our first ML model!</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optional: Make our charts look nice</span></span>
<span id="cb1-9">plt.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'seaborn'</span>)</span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Understanding the Tools
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><p><code>numpy</code>: Like a super calculator</p></li>
<li><p><code>pandas</code>: Like Excel, but more powerful</p></li>
<li><p><code>matplotlib</code>: For making charts and graphs</p></li>
<li><p><code>sklearn</code>: Our machine learning toolkit</p></li>
</ul>
</div>
</div>
</section>
<section id="part-1-your-first-machine-learning-project" class="level2">
<h2 class="anchored" data-anchor-id="part-1-your-first-machine-learning-project">Part 1: Your First Machine Learning Project</h2>
<p>Let’s start with something everyone understands: house prices!</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Why Houses?
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><p>Everyone knows bigger houses usually cost more</p></li>
<li><p>It’s easy to visualize</p></li>
<li><p>The relationship is fairly simple</p></li>
<li><p>It’s a real-world problem</p></li>
</ul>
</div>
</div>
<section id="step-1-creating-our-data" class="level3">
<h3 class="anchored" data-anchor-id="step-1-creating-our-data">Step 1: Creating Our Data</h3>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create some pretend house data</span></span>
<span id="cb2-2">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This makes our random numbers predictable</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create 100 house sizes between 1000 and 5000 square feet</span></span>
<span id="cb2-5">house_sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create prices: base price + size factor + some randomness</span></span>
<span id="cb2-8">base_price <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Starting at $200K</span></span>
<span id="cb2-9">size_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Each square foot adds $0.3K</span></span>
<span id="cb2-10">noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Random variation</span></span>
<span id="cb2-11"></span>
<span id="cb2-12">house_prices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base_price <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> size_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> house_sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's look at our data!</span></span>
<span id="cb2-15">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb2-16">plt.scatter(house_sizes, house_prices, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb2-17">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'House Size (square feet)'</span>)</span>
<span id="cb2-18">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Price ($K)'</span>)</span>
<span id="cb2-19">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'House Prices vs Size'</span>)</span>
<span id="cb2-20"></span>
<span id="cb2-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a grid to make it easier to read</span></span>
<span id="cb2-22">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb2-23">plt.show()</span></code></pre></div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Understanding the Code Above
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p><code>np.linspace(1000, 5000, 100)</code>: Creates 100 evenly spaced numbers between 1000 and 5000</p></li>
<li><p><code>base_price + size_factor * house_sizes</code>: Basic price calculation</p>
<ul>
<li>Example: A 2000 sq ft house would be: $200K + (0.3 * 2000) = $800K</li>
</ul></li>
<li><p><code>noise</code>: Adds random variation, just like real house prices aren’t perfectly predictable</p></li>
</ol>
</div>
</div>
</section>
<section id="step-2-training-our-first-model" class="level3">
<h3 class="anchored" data-anchor-id="step-2-training-our-first-model">Step 2: Training Our First Model</h3>
<p>Now comes the fun part - teaching our computer to predict house prices!</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Prepare the data</span></span>
<span id="cb3-2">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> house_sizes.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape data for scikit-learn</span></span>
<span id="cb3-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> house_prices</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: Split into training and testing sets</span></span>
<span id="cb3-6">X_train, X_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(</span>
<span id="cb3-7">    X, y, </span>
<span id="cb3-8">    test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use 20% for testing</span></span>
<span id="cb3-9">    random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For reproducible results</span></span>
<span id="cb3-10">)</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 3: Create and train the model</span></span>
<span id="cb3-13">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression()</span>
<span id="cb3-14">model.fit(X_train, y_train)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The actual learning happens here!</span></span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 4: Make predictions</span></span>
<span id="cb3-17">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(X_test)</span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's visualize what the model learned</span></span>
<span id="cb3-20">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb3-21"></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot training data</span></span>
<span id="cb3-23">plt.scatter(X_train, y_train, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training Data'</span>)</span>
<span id="cb3-24"></span>
<span id="cb3-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot testing data</span></span>
<span id="cb3-26">plt.scatter(X_test, y_test, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Testing Data'</span>)</span>
<span id="cb3-27"></span>
<span id="cb3-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the model's predictions</span></span>
<span id="cb3-29">plt.plot(X_test, y_pred, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model Predictions'</span>)</span>
<span id="cb3-30"></span>
<span id="cb3-31">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'House Size (square feet)'</span>)</span>
<span id="cb3-32">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Price ($K)'</span>)</span>
<span id="cb3-33">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'House Price Predictor in Action!'</span>)</span>
<span id="cb3-34">plt.legend()</span>
<span id="cb3-35">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb3-36">plt.show()</span>
<span id="cb3-37"></span>
<span id="cb3-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's test it out!</span></span>
<span id="cb3-39">test_sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3500</span>]</span>
<span id="cb3-40"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Let's predict some house prices:"</span>)</span>
<span id="cb3-41"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb3-42"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> size <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_sizes:</span>
<span id="cb3-43">    predicted_price <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict([[size]])[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-44">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"A </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> sq ft house should cost: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>predicted_price<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">K"</span>)</span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What Just Happened?
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>We split our data into two parts:</p>
<ul>
<li>Training data (80%): Like studying for a test</li>
<li>Testing data (20%): Like taking the actual test</li>
</ul></li>
<li><p>The model learned the relationship between size and price</p></li>
<li><p>The red line shows what the model learned</p></li>
<li><p>Blue dots are training data, green dots are testing data</p></li>
</ol>
</div>
</div>
</section>
</section>
<section id="part-2-types-of-machine-learning-with-real-examples" class="level2">
<h2 class="anchored" data-anchor-id="part-2-types-of-machine-learning-with-real-examples">Part 2: Types of Machine Learning (With Real Examples!)</h2>
<section id="supervised-learning-learning-from-examples" class="level3">
<h3 class="anchored" data-anchor-id="supervised-learning-learning-from-examples">1. Supervised Learning: Learning from Examples</h3>
<p>This is like learning with a teacher who gives you questions AND answers.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Real-World Examples
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>📧 Gmail’s Spam Filter
<ul>
<li>Input: Email content</li>
<li>Output: Spam or Not Spam</li>
</ul></li>
<li>🏠 Our House Price Predictor
<ul>
<li>Input: House size</li>
<li>Output: Price</li>
</ul></li>
<li>📱 Face Recognition
<ul>
<li>Input: Photo</li>
<li>Output: Person’s name</li>
</ul></li>
</ul>
</div>
</div>
<p>Let’s build another supervised learning example - a simple age classifier:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.tree <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DecisionTreeClassifier</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create example data</span></span>
<span id="cb4-5">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate data for different age groups</span></span>
<span id="cb4-8">young <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Young people</span></span>
<span id="cb4-9">middle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Middle-aged</span></span>
<span id="cb4-10">senior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Seniors</span></span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Features: Age and Activity Level</span></span>
<span id="cb4-13">young_activity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Higher activity</span></span>
<span id="cb4-14">middle_activity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Medium activity</span></span>
<span id="cb4-15">senior_activity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lower activity</span></span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine data</span></span>
<span id="cb4-18">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.vstack([</span>
<span id="cb4-19">    np.column_stack([young, young_activity]),</span>
<span id="cb4-20">    np.column_stack([middle, middle_activity]),</span>
<span id="cb4-21">    np.column_stack([senior, senior_activity])</span>
<span id="cb4-22">])</span>
<span id="cb4-23"></span>
<span id="cb4-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create labels: 0 for young, 1 for middle, 2 for senior</span></span>
<span id="cb4-25">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb4-26"></span>
<span id="cb4-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train the model</span></span>
<span id="cb4-28">clf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DecisionTreeClassifier(max_depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simple decision tree</span></span>
<span id="cb4-29">clf.fit(X, y)</span>
<span id="cb4-30"></span>
<span id="cb4-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a grid to visualize the decision boundaries</span></span>
<span id="cb4-32">x_min, x_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-33">y_min, y_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-34">xx, yy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.meshgrid(np.arange(x_min, x_max, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>),</span>
<span id="cb4-35">                     np.arange(y_min, y_max, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>))</span>
<span id="cb4-36"></span>
<span id="cb4-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make predictions for each point in the grid</span></span>
<span id="cb4-38">Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> clf.predict(np.c_[xx.ravel(), yy.ravel()])</span>
<span id="cb4-39">Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z.reshape(xx.shape)</span>
<span id="cb4-40"></span>
<span id="cb4-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the results</span></span>
<span id="cb4-42">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb4-43">plt.contourf(xx, yy, Z, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>)</span>
<span id="cb4-44">plt.scatter(X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>)</span>
<span id="cb4-45">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>)</span>
<span id="cb4-46">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Activity Level (hours/week)'</span>)</span>
<span id="cb4-47">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age Group Classification'</span>)</span>
<span id="cb4-48">plt.colorbar(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age Group (0: Young, 1: Middle, 2: Senior)'</span>)</span>
<span id="cb4-49">plt.show()</span></code></pre></div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Understanding the Age Classifier
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>We created fake data about people’s age and activity levels</p></li>
<li><p>The model learns to group people into three categories:</p>
<ul>
<li>Young (around 25 years)</li>
<li>Middle-aged (around 45 years)</li>
<li>Senior (around 65 years)</li>
</ul></li>
<li><p>The colored regions show how the model makes decisions</p></li>
<li><p>Each dot represents one person</p></li>
</ol>
</div>
</div>
</section>
<section id="unsupervised-learning-finding-hidden-patterns" class="level3">
<h3 class="anchored" data-anchor-id="unsupervised-learning-finding-hidden-patterns">2. Unsupervised Learning: Finding Hidden Patterns</h3>
<p>This is like organizing your closet - you group similar items together naturally.</p>
<p>Let’s build a simple customer segmentation system:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.cluster <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> KMeans</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create customer purchase data</span></span>
<span id="cb5-4">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate three types of customers</span></span>
<span id="cb5-7">budget_shoppers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>], scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb5-8">regular_shoppers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>], scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb5-9">luxury_shoppers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>], scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine all customers</span></span>
<span id="cb5-12">customer_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.vstack([budget_shoppers, regular_shoppers, luxury_shoppers])</span>
<span id="cb5-13"></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find natural groups</span></span>
<span id="cb5-15">kmeans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KMeans(n_clusters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb5-16">clusters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kmeans.fit_predict(customer_data)</span>
<span id="cb5-17"></span>
<span id="cb5-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize the customer segments</span></span>
<span id="cb5-19">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb5-20">scatter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.scatter(customer_data[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], customer_data[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], </span>
<span id="cb5-21">                     c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>clusters, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb5-22">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Average Purchase Amount ($)'</span>)</span>
<span id="cb5-23">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shopping Frequency (visits/month)'</span>)</span>
<span id="cb5-24">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Customer Segments'</span>)</span>
<span id="cb5-25">plt.colorbar(scatter, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Customer Segment'</span>)</span>
<span id="cb5-26"></span>
<span id="cb5-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add cluster centers</span></span>
<span id="cb5-28">centers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kmeans.cluster_centers_</span>
<span id="cb5-29">plt.scatter(centers[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], centers[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>, </span>
<span id="cb5-30">           s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Segment Centers'</span>)</span>
<span id="cb5-31">plt.legend()</span>
<span id="cb5-32">plt.show()</span>
<span id="cb5-33"></span>
<span id="cb5-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print insights about each segment</span></span>
<span id="cb5-35"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, center <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(centers):</span>
<span id="cb5-36">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Customer Segment </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:"</span>)</span>
<span id="cb5-37">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"- Average Purchase: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>center[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-38">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"- Shopping Frequency: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>center[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> visits/month"</span>)</span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Real-World Applications of Unsupervised Learning
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>🎵 Spotify Groups Similar Songs
<ul>
<li>Creates playlists automatically</li>
<li>Suggests new music you might like</li>
</ul></li>
<li>📺 Netflix Categories
<ul>
<li>Groups similar movies/shows</li>
<li>Creates those oddly specific categories you see</li>
</ul></li>
<li>🛒 Amazon Customer Segments
<ul>
<li>Groups shoppers by behavior</li>
<li>Personalizes recommendations</li>
</ul></li>
</ol>
</div>
</div>
</section>
</section>
<section id="part-3-making-your-models-better" class="level2">
<h2 class="anchored" data-anchor-id="part-3-making-your-models-better">Part 3: Making Your Models Better</h2>
<section id="data-preparation" class="level3">
<h3 class="anchored" data-anchor-id="data-preparation">1. Data Preparation</h3>
<p>Always clean your data first! Here’s a simple example:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a messy dataset</span></span>
<span id="cb6-2">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb6-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'age'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>],</span>
<span id="cb6-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75000</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80000</span>],</span>
<span id="cb6-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purchase'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yes'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no'</span>]</span>
<span id="cb6-6">})</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original Data:"</span>)</span>
<span id="cb6-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(data)</span>
<span id="cb6-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Missing Values:"</span>)</span>
<span id="cb6-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(data.isnull().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>())</span>
<span id="cb6-12"></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clean the data</span></span>
<span id="cb6-14">cleaned_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.copy()</span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill missing ages with median</span></span>
<span id="cb6-16">cleaned_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'age'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cleaned_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'age'</span>].fillna(cleaned_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'age'</span>].median())</span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill missing income with mean</span></span>
<span id="cb6-18">cleaned_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cleaned_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income'</span>].fillna(cleaned_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income'</span>].mean())</span>
<span id="cb6-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill missing purchase with mode (most common value)</span></span>
<span id="cb6-20">cleaned_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purchase'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cleaned_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purchase'</span>].fillna(cleaned_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purchase'</span>].mode()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb6-21"></span>
<span id="cb6-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Cleaned Data:"</span>)</span>
<span id="cb6-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(cleaned_data)</span></code></pre></div>
</section>
<section id="feature-scaling" class="level3">
<h3 class="anchored" data-anchor-id="feature-scaling">2. Feature Scaling</h3>
<p>Make sure your features are on the same scale:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StandardScaler</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create example data</span></span>
<span id="cb7-4">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb7-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'age'</span>: np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>),          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ages around 35</span></span>
<span id="cb7-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income'</span>: np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Incomes around 50k</span></span>
<span id="cb7-7">})</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale the features</span></span>
<span id="cb7-10">scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StandardScaler()</span>
<span id="cb7-11">scaled_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler.fit_transform(data)</span>
<span id="cb7-12">scaled_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(scaled_data, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data.columns)</span>
<span id="cb7-13"></span>
<span id="cb7-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize before and after</span></span>
<span id="cb7-15">fig, (ax1, ax2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb7-16"></span>
<span id="cb7-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Before scaling</span></span>
<span id="cb7-18">data.boxplot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax1)</span>
<span id="cb7-19">ax1.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Before Scaling'</span>)</span>
<span id="cb7-20">ax1.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Original Values'</span>)</span>
<span id="cb7-21"></span>
<span id="cb7-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># After scaling</span></span>
<span id="cb7-23">scaled_df.boxplot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax2)</span>
<span id="cb7-24">ax2.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'After Scaling'</span>)</span>
<span id="cb7-25">ax2.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Scaled Values'</span>)</span>
<span id="cb7-26"></span>
<span id="cb7-27">plt.show()</span></code></pre></div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Common Beginner Mistakes to Avoid
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Not Splitting Data
<ul>
<li>Always split into training and testing sets</li>
<li>Don’t test on your training data!</li>
</ul></li>
<li>Not Scaling Features
<ul>
<li>Different scales can confuse the model</li>
<li>Example: Age (0-100) vs.&nbsp;Income (0-1,000,000)</li>
</ul></li>
<li>Overfitting
<ul>
<li>Model memorizes instead of learning</li>
<li>Like memorizing test answers without understanding</li>
</ul></li>
<li>Using Complex Models Too Soon
<ul>
<li>Start simple!</li>
<li>Add complexity only when needed</li>
</ul></li>
</ol>
</div>
</div>
</section>
</section>
<section id="your-next-steps" class="level2">
<h2 class="anchored" data-anchor-id="your-next-steps">Your Next Steps</h2>
<ol type="1">
<li>Practice Projects:
<ul>
<li>Predict student grades based on study hours</li>
<li>Classify emails as urgent or non-urgent</li>
<li>Group movies by their descriptions</li>
</ul></li>
<li>Resources:
<ul>
<li>📚 Kaggle.com (free datasets and competitions)</li>
<li>📺 Google Colab (free Python environment)</li>
<li>🎓 scikit-learn tutorials</li>
</ul></li>
<li>Advanced Topics to Explore:
<ul>
<li>Deep Learning</li>
<li>Natural Language Processing</li>
<li>Computer Vision</li>
</ul></li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Remember
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Start with simple projects</li>
<li>Use real-world examples</li>
<li>Don’t be afraid to make mistakes</li>
<li>Share your work with others</li>
</ul>
</div>
</div>
</section>
<section id="quick-reference-python-for-ml" class="level2">
<h2 class="anchored" data-anchor-id="quick-reference-python-for-ml">Quick Reference: Python for ML</h2>
<p>```python # Common patterns you’ll use often:</p>
</section>
<section id="load-and-prepare-data" class="level1">
<h1>1. Load and prepare data</h1>
<p>data = pd.read_csv(‘your_data.csv’) X = data.drop(‘target_column’, axis=1) y = data[‘target_column’]</p>
</section>
<section id="split-data" class="level1">
<h1>2. Split data</h1>
<p>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)</p>
</section>
<section id="scale-features" class="level1">
<h1>3. Scale features</h1>
<p>scaler = StandardScaler() X_train_scaled = scaler.fit_transform(X_train) X_test_scaled = scaler.transform(X_test)</p>
</section>
<section id="train-model" class="level1">
<h1>4. Train model</h1>
<p>model = LinearRegression() # or any other model model.fit(X_train_scaled, y_train)</p>
</section>
<section id="make-predictions" class="level1">
<h1>5. Make predictions</h1>
<p>predictions = model.predict(X_test_scaled)</p>
</section>
<section id="evaluate" class="level1">
<h1>6. Evaluate</h1>
<p>from sklearn.metrics import accuracy_score # for classification accuracy = accuracy_score(y_test, predictions)</p>


</section>

 ]]></description>
  <category>machine-learning</category>
  <category>fundamentals</category>
  <category>python</category>
  <category>hands-on</category>
  <guid>https://ram-polisetti.github.io/BendTheCurve/posts/ml-fundamentals-beginners/</guid>
  <pubDate>Tue, 19 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://ram-polisetti.github.io/BendTheCurve/posts/ml-fundamentals-beginners/ml_fundamentals.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>ML Fundamentals: Understanding the Basics</title>
  <dc:creator>Ram Polisetti</dc:creator>
  <link>https://ram-polisetti.github.io/BendTheCurve/posts/ml-fundamentals/</link>
  <description><![CDATA[ 





<section id="understanding-machine-learning-fundamentals" class="level1">
<h1>Understanding Machine Learning Fundamentals</h1>
<p>Machine learning (ML) is a transformative field that enables computers to learn from data without being explicitly programmed. Before diving into specific algorithms or frameworks, it’s crucial to understand the fundamental concepts that form the foundation of machine learning.</p>
<section id="what-is-machine-learning" class="level2">
<h2 class="anchored" data-anchor-id="what-is-machine-learning">What is Machine Learning?</h2>
<p>Machine learning is a subset of artificial intelligence that focuses on developing systems that can learn and improve from experience. Instead of following explicit instructions, ML systems identify patterns in data to make decisions or predictions.</p>
<section id="key-characteristics-of-machine-learning" class="level3">
<h3 class="anchored" data-anchor-id="key-characteristics-of-machine-learning">Key Characteristics of Machine Learning:</h3>
<ol type="1">
<li><strong>Data-Driven</strong>: ML systems learn from examples rather than following predefined rules</li>
<li><strong>Pattern Recognition</strong>: They identify patterns and relationships in data</li>
<li><strong>Automation</strong>: They can automatically improve with more experience/data</li>
<li><strong>Generalization</strong>: They can handle new, unseen data based on learned patterns</li>
</ol>
</section>
</section>
<section id="types-of-machine-learning" class="level2">
<h2 class="anchored" data-anchor-id="types-of-machine-learning">Types of Machine Learning</h2>
<section id="supervised-learning" class="level3">
<h3 class="anchored" data-anchor-id="supervised-learning">1. Supervised Learning</h3>
<ul>
<li>Learning from labeled data</li>
<li>Examples: Classification, Regression</li>
<li>Use cases: Spam detection, Price prediction, Image recognition</li>
</ul>
</section>
<section id="unsupervised-learning" class="level3">
<h3 class="anchored" data-anchor-id="unsupervised-learning">2. Unsupervised Learning</h3>
<ul>
<li>Learning from unlabeled data</li>
<li>Examples: Clustering, Dimensionality Reduction</li>
<li>Use cases: Customer segmentation, Feature learning</li>
</ul>
</section>
<section id="reinforcement-learning" class="level3">
<h3 class="anchored" data-anchor-id="reinforcement-learning">3. Reinforcement Learning</h3>
<ul>
<li>Learning through interaction with an environment</li>
<li>Examples: Game playing, Robot navigation</li>
<li>Use cases: Autonomous systems, Game AI</li>
</ul>
</section>
</section>
<section id="the-machine-learning-workflow" class="level2">
<h2 class="anchored" data-anchor-id="the-machine-learning-workflow">The Machine Learning Workflow</h2>
<p>Understanding the ML workflow is crucial for successful implementation:</p>
<ol type="1">
<li><strong>Problem Definition</strong>
<ul>
<li>Define objectives</li>
<li>Identify success metrics</li>
<li>Understand constraints</li>
</ul></li>
<li><strong>Data Collection</strong>
<ul>
<li>Gather relevant data</li>
<li>Ensure data quality</li>
<li>Consider data privacy and ethics</li>
</ul></li>
<li><strong>Data Preprocessing</strong>
<ul>
<li>Clean the data</li>
<li>Handle missing values</li>
<li>Format data appropriately</li>
</ul></li>
<li><strong>Feature Engineering</strong>
<ul>
<li>Select relevant features</li>
<li>Create new features</li>
<li>Transform existing features</li>
</ul></li>
<li><strong>Model Selection</strong>
<ul>
<li>Choose appropriate algorithms</li>
<li>Consider model complexity</li>
<li>Balance bias and variance</li>
</ul></li>
<li><strong>Model Training</strong>
<ul>
<li>Split data into training/validation sets</li>
<li>Train the model</li>
<li>Tune hyperparameters</li>
</ul></li>
<li><strong>Model Evaluation</strong>
<ul>
<li>Assess performance</li>
<li>Validate on test data</li>
<li>Consider business metrics</li>
</ul></li>
<li><strong>Deployment</strong>
<ul>
<li>Integrate with systems</li>
<li>Monitor performance</li>
<li>Maintain and update</li>
</ul></li>
</ol>
</section>
<section id="essential-terminology" class="level2">
<h2 class="anchored" data-anchor-id="essential-terminology">Essential Terminology</h2>
<section id="model-components" class="level3">
<h3 class="anchored" data-anchor-id="model-components">Model Components</h3>
<ul>
<li><strong>Features</strong>: Input variables used for prediction</li>
<li><strong>Labels</strong>: Target variables we’re trying to predict</li>
<li><strong>Parameters</strong>: Values learned during training</li>
<li><strong>Hyperparameters</strong>: Configuration values set before training</li>
</ul>
</section>
<section id="model-evaluation" class="level3">
<h3 class="anchored" data-anchor-id="model-evaluation">Model Evaluation</h3>
<ul>
<li><strong>Bias</strong>: Model’s tendency to consistently miss the true relationship</li>
<li><strong>Variance</strong>: Model’s sensitivity to fluctuations in the training data</li>
<li><strong>Overfitting</strong>: Model learns noise in training data</li>
<li><strong>Underfitting</strong>: Model fails to capture underlying patterns</li>
</ul>
</section>
<section id="performance-metrics" class="level3">
<h3 class="anchored" data-anchor-id="performance-metrics">Performance Metrics</h3>
<ul>
<li><strong>Accuracy</strong>: Proportion of correct predictions</li>
<li><strong>Precision</strong>: Accuracy of positive predictions</li>
<li><strong>Recall</strong>: Ability to find all positive instances</li>
<li><strong>F1 Score</strong>: Harmonic mean of precision and recall</li>
</ul>
</section>
</section>
<section id="common-challenges-in-machine-learning" class="level2">
<h2 class="anchored" data-anchor-id="common-challenges-in-machine-learning">Common Challenges in Machine Learning</h2>
<ol type="1">
<li><strong>Data Quality Issues</strong>
<ul>
<li>Missing values</li>
<li>Noisy data</li>
<li>Inconsistent formatting</li>
</ul></li>
<li><strong>Feature Selection</strong>
<ul>
<li>Identifying relevant features</li>
<li>Handling high dimensionality</li>
<li>Creating meaningful features</li>
</ul></li>
<li><strong>Model Selection</strong>
<ul>
<li>Choosing appropriate algorithms</li>
<li>Balancing complexity and performance</li>
<li>Handling computational constraints</li>
</ul></li>
<li><strong>Overfitting and Underfitting</strong>
<ul>
<li>Finding the right model complexity</li>
<li>Gathering sufficient training data</li>
<li>Using appropriate regularization</li>
</ul></li>
</ol>
</section>
<section id="best-practices" class="level2">
<h2 class="anchored" data-anchor-id="best-practices">Best Practices</h2>
<ol type="1">
<li><strong>Start Simple</strong>
<ul>
<li>Begin with basic models</li>
<li>Establish baselines</li>
<li>Gradually increase complexity</li>
</ul></li>
<li><strong>Cross-Validation</strong>
<ul>
<li>Use multiple data splits</li>
<li>Validate model stability</li>
<li>Ensure generalization</li>
</ul></li>
<li><strong>Feature Engineering</strong>
<ul>
<li>Create meaningful features</li>
<li>Remove irrelevant features</li>
<li>Handle categorical variables appropriately</li>
</ul></li>
<li><strong>Model Evaluation</strong>
<ul>
<li>Use appropriate metrics</li>
<li>Consider business impact</li>
<li>Test on unseen data</li>
</ul></li>
</ol>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next Steps</h2>
<p>Understanding these fundamentals is crucial before diving into specific algorithms or frameworks. In the next posts, we’ll explore:</p>
<ol type="1">
<li>Data Understanding and Preprocessing</li>
<li>Feature Engineering and Selection</li>
<li>Model Selection and Evaluation</li>
<li>Advanced Topics and Deep Learning</li>
</ol>
<p>Stay tuned for more detailed explorations of each topic!</p>
</section>
<section id="additional-resources" class="level2">
<h2 class="anchored" data-anchor-id="additional-resources">Additional Resources</h2>
<ol type="1">
<li>Books:
<ul>
<li>“Introduction to Machine Learning with Python” by Andreas Müller &amp; Sarah Guido</li>
<li>“The Hundred-Page Machine Learning Book” by Andriy Burkov</li>
</ul></li>
<li>Online Courses:
<ul>
<li>Andrew Ng’s Machine Learning Course on Coursera</li>
<li>Fast.ai’s Practical Deep Learning Course</li>
</ul></li>
<li>Websites:
<ul>
<li>Scikit-learn Documentation</li>
<li>Towards Data Science</li>
<li>Machine Learning Mastery</li>
</ul></li>
</ol>
<p>Remember: Building a strong foundation in these fundamentals is crucial for success in machine learning. Take time to understand these concepts thoroughly before moving on to more advanced topics.</p>


</section>
</section>

 ]]></description>
  <category>machine-learning</category>
  <category>fundamentals</category>
  <category>theory</category>
  <guid>https://ram-polisetti.github.io/BendTheCurve/posts/ml-fundamentals/</guid>
  <pubDate>Tue, 19 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://ram-polisetti.github.io/BendTheCurve/posts/ml-fundamentals/ml_basics.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Machine Learning in Everyday Life: A Practical Guide</title>
  <dc:creator>Ram Polisetti</dc:creator>
  <link>https://ram-polisetti.github.io/BendTheCurve/posts/ml-in-everyday-life/</link>
  <description><![CDATA[ 





<section id="machine-learning-in-your-daily-life" class="level1">
<h1>Machine Learning in Your Daily Life</h1>
<p>You might not realize it, but machine learning is already a big part of your daily routine. From the moment you wake up until you go to bed, ML algorithms are working behind the scenes to make your life easier and more convenient.</p>
<section id="morning-routine-with-ml" class="level2">
<h2 class="anchored" data-anchor-id="morning-routine-with-ml">Morning Routine with ML</h2>
<section id="smart-home-devices" class="level3">
<h3 class="anchored" data-anchor-id="smart-home-devices">1. Smart Home Devices</h3>
<ul>
<li><strong>Smart Thermostats</strong>
<ul>
<li>Learn your temperature preferences</li>
<li>Adjust based on time of day</li>
<li>Save energy by predicting when you’re away</li>
<li>Example: Nest Learning Thermostat</li>
</ul></li>
<li><strong>Voice Assistants</strong>
<ul>
<li>Recognize your voice commands</li>
<li>Learn your accent and speaking patterns</li>
<li>Improve understanding over time</li>
<li>Examples: Alexa, Google Assistant, Siri</li>
</ul></li>
</ul>
</section>
<section id="smartphone-features" class="level3">
<h3 class="anchored" data-anchor-id="smartphone-features">2. Smartphone Features</h3>
<ul>
<li><strong>Face Recognition</strong>
<ul>
<li>Unlocks your phone securely</li>
<li>Adapts to changes in appearance</li>
<li>Works in different lighting conditions</li>
</ul></li>
<li><strong>Keyboard Predictions</strong>
<ul>
<li>Learns your typing patterns</li>
<li>Suggests words based on context</li>
<li>Adapts to your vocabulary</li>
</ul></li>
</ul>
</section>
</section>
<section id="during-your-commute" class="level2">
<h2 class="anchored" data-anchor-id="during-your-commute">During Your Commute</h2>
<section id="navigation-apps" class="level3">
<h3 class="anchored" data-anchor-id="navigation-apps">1. Navigation Apps</h3>
<ul>
<li><strong>Traffic Prediction</strong>
<ul>
<li>Analyzes historical traffic patterns</li>
<li>Predicts delays in real-time</li>
<li>Suggests faster routes</li>
<li>Example: Google Maps, Waze</li>
</ul></li>
</ul>
</section>
<section id="ride-sharing-services" class="level3">
<h3 class="anchored" data-anchor-id="ride-sharing-services">2. Ride-Sharing Services</h3>
<ul>
<li><strong>Price Optimization</strong>
<ul>
<li>Adjusts prices based on demand</li>
<li>Predicts busy periods</li>
<li>Matches drivers efficiently</li>
<li>Examples: Uber, Lyft</li>
</ul></li>
</ul>
</section>
</section>
<section id="at-work" class="level2">
<h2 class="anchored" data-anchor-id="at-work">At Work</h2>
<section id="email-management" class="level3">
<h3 class="anchored" data-anchor-id="email-management">1. Email Management</h3>
<ul>
<li><strong>Spam Filtering</strong>
<ul>
<li>Identifies unwanted emails</li>
<li>Learns from your actions</li>
<li>Adapts to new spam patterns</li>
</ul></li>
<li><strong>Smart Categorization</strong>
<ul>
<li>Sorts emails automatically</li>
<li>Prioritizes important messages</li>
<li>Suggests quick responses</li>
</ul></li>
</ul>
</section>
<section id="productivity-tools" class="level3">
<h3 class="anchored" data-anchor-id="productivity-tools">2. Productivity Tools</h3>
<ul>
<li><strong>Document Search</strong>
<ul>
<li>Understands natural language queries</li>
<li>Finds relevant files quickly</li>
<li>Improves with usage</li>
</ul></li>
<li><strong>Meeting Scheduling</strong>
<ul>
<li>Learns preferred meeting times</li>
<li>Suggests optimal slots</li>
<li>Considers participants’ schedules</li>
</ul></li>
</ul>
</section>
</section>
<section id="shopping-and-entertainment" class="level2">
<h2 class="anchored" data-anchor-id="shopping-and-entertainment">Shopping and Entertainment</h2>
<section id="online-shopping" class="level3">
<h3 class="anchored" data-anchor-id="online-shopping">1. Online Shopping</h3>
<ul>
<li><strong>Product Recommendations</strong>
<ul>
<li>Based on your browsing history</li>
<li>Similar items you might like</li>
<li>Personalized deals</li>
<li>Example: Amazon’s recommendations</li>
</ul></li>
<li><strong>Price Tracking</strong>
<ul>
<li>Predicts price changes</li>
<li>Alerts for best buying times</li>
<li>Finds similar products</li>
</ul></li>
</ul>
</section>
<section id="streaming-services" class="level3">
<h3 class="anchored" data-anchor-id="streaming-services">2. Streaming Services</h3>
<ul>
<li><strong>Content Recommendations</strong>
<ul>
<li>Learns your viewing preferences</li>
<li>Suggests new shows/movies</li>
<li>Personalizes homepage</li>
<li>Examples: Netflix, Spotify</li>
</ul></li>
</ul>
</section>
<section id="social-media" class="level3">
<h3 class="anchored" data-anchor-id="social-media">3. Social Media</h3>
<ul>
<li><strong>Feed Customization</strong>
<ul>
<li>Shows relevant content</li>
<li>Learns from your interactions</li>
<li>Filters unwanted content</li>
<li>Examples: Instagram, Facebook</li>
</ul></li>
</ul>
</section>
</section>
<section id="health-and-fitness" class="level2">
<h2 class="anchored" data-anchor-id="health-and-fitness">Health and Fitness</h2>
<section id="fitness-trackers" class="level3">
<h3 class="anchored" data-anchor-id="fitness-trackers">1. Fitness Trackers</h3>
<ul>
<li><strong>Activity Recognition</strong>
<ul>
<li>Identifies exercise types</li>
<li>Counts steps accurately</li>
<li>Monitors sleep patterns</li>
</ul></li>
<li><strong>Health Insights</strong>
<ul>
<li>Predicts fitness trends</li>
<li>Suggests workout improvements</li>
<li>Personalizes goals</li>
</ul></li>
</ul>
</section>
<section id="healthcare-apps" class="level3">
<h3 class="anchored" data-anchor-id="healthcare-apps">2. Healthcare Apps</h3>
<ul>
<li><strong>Symptom Checking</strong>
<ul>
<li>Analyzes symptoms</li>
<li>Suggests possible causes</li>
<li>Recommends actions</li>
</ul></li>
<li><strong>Mental Health Support</strong>
<ul>
<li>Mood tracking</li>
<li>Personalized recommendations</li>
<li>Early warning signs</li>
</ul></li>
</ul>
</section>
</section>
<section id="financial-services" class="level2">
<h2 class="anchored" data-anchor-id="financial-services">Financial Services</h2>
<section id="banking" class="level3">
<h3 class="anchored" data-anchor-id="banking">1. Banking</h3>
<ul>
<li><strong>Fraud Detection</strong>
<ul>
<li>Spots unusual transactions</li>
<li>Prevents unauthorized use</li>
<li>Learns spending patterns</li>
</ul></li>
<li><strong>Automated Banking</strong>
<ul>
<li>Smart ATMs</li>
<li>Chatbot customer service</li>
<li>Personalized financial advice</li>
</ul></li>
</ul>
</section>
<section id="personal-finance" class="level3">
<h3 class="anchored" data-anchor-id="personal-finance">2. Personal Finance</h3>
<ul>
<li><strong>Budget Apps</strong>
<ul>
<li>Categorize expenses</li>
<li>Predict future spending</li>
<li>Suggest savings opportunities</li>
</ul></li>
</ul>
</section>
</section>
<section id="how-ml-makes-these-possible" class="level2">
<h2 class="anchored" data-anchor-id="how-ml-makes-these-possible">How ML Makes These Possible</h2>
<section id="pattern-recognition" class="level3">
<h3 class="anchored" data-anchor-id="pattern-recognition">1. Pattern Recognition</h3>
<ul>
<li>Identifies regular behaviors</li>
<li>Spots unusual activities</li>
<li>Learns from historical data</li>
</ul>
</section>
<section id="personalization" class="level3">
<h3 class="anchored" data-anchor-id="personalization">2. Personalization</h3>
<ul>
<li>Adapts to individual preferences</li>
<li>Improves with more data</li>
<li>Creates unique experiences</li>
</ul>
</section>
<section id="prediction" class="level3">
<h3 class="anchored" data-anchor-id="prediction">3. Prediction</h3>
<ul>
<li>Anticipates needs</li>
<li>Forecasts events</li>
<li>Suggests actions</li>
</ul>
</section>
</section>
<section id="benefits-in-daily-life" class="level2">
<h2 class="anchored" data-anchor-id="benefits-in-daily-life">Benefits in Daily Life</h2>
<section id="time-saving" class="level3">
<h3 class="anchored" data-anchor-id="time-saving">1. Time Saving</h3>
<ul>
<li>Automates routine tasks</li>
<li>Provides quick answers</li>
<li>Reduces decision time</li>
</ul>
</section>
<section id="better-decisions" class="level3">
<h3 class="anchored" data-anchor-id="better-decisions">2. Better Decisions</h3>
<ul>
<li>More informed choices</li>
<li>Personalized recommendations</li>
<li>Data-driven insights</li>
</ul>
</section>
<section id="enhanced-experiences" class="level3">
<h3 class="anchored" data-anchor-id="enhanced-experiences">3. Enhanced Experiences</h3>
<ul>
<li>Customized content</li>
<li>Smoother interactions</li>
<li>Proactive assistance</li>
</ul>
</section>
</section>
<section id="privacy-considerations" class="level2">
<h2 class="anchored" data-anchor-id="privacy-considerations">Privacy Considerations</h2>
<section id="data-collection" class="level3">
<h3 class="anchored" data-anchor-id="data-collection">1. Data Collection</h3>
<ul>
<li>What data is collected</li>
<li>How it’s used</li>
<li>Storage security</li>
</ul>
</section>
<section id="user-control" class="level3">
<h3 class="anchored" data-anchor-id="user-control">2. User Control</h3>
<ul>
<li>Privacy settings</li>
<li>Opt-out options</li>
<li>Data access rights</li>
</ul>
</section>
<section id="best-practices" class="level3">
<h3 class="anchored" data-anchor-id="best-practices">3. Best Practices</h3>
<ul>
<li>Review app permissions</li>
<li>Regular privacy checks</li>
<li>Understand data usage</li>
</ul>
</section>
</section>
<section id="future-trends" class="level2">
<h2 class="anchored" data-anchor-id="future-trends">Future Trends</h2>
<section id="more-personalization" class="level3">
<h3 class="anchored" data-anchor-id="more-personalization">1. More Personalization</h3>
<ul>
<li>Deeper understanding</li>
<li>Better predictions</li>
<li>Tailored experiences</li>
</ul>
</section>
<section id="improved-integration" class="level3">
<h3 class="anchored" data-anchor-id="improved-integration">2. Improved Integration</h3>
<ul>
<li>Seamless connections</li>
<li>Cross-device harmony</li>
<li>Unified experiences</li>
</ul>
</section>
<section id="enhanced-privacy" class="level3">
<h3 class="anchored" data-anchor-id="enhanced-privacy">3. Enhanced Privacy</h3>
<ul>
<li>Better data protection</li>
<li>More user control</li>
<li>Transparent practices</li>
</ul>
</section>
</section>
<section id="making-the-most-of-ml" class="level2">
<h2 class="anchored" data-anchor-id="making-the-most-of-ml">Making the Most of ML</h2>
<section id="be-aware" class="level3">
<h3 class="anchored" data-anchor-id="be-aware">1. Be Aware</h3>
<ul>
<li>Notice ML in daily life</li>
<li>Understand basic concepts</li>
<li>Stay informed of changes</li>
</ul>
</section>
<section id="use-features-wisely" class="level3">
<h3 class="anchored" data-anchor-id="use-features-wisely">2. Use Features Wisely</h3>
<ul>
<li>Enable helpful features</li>
<li>Maintain privacy</li>
<li>Provide feedback</li>
</ul>
</section>
<section id="stay-safe" class="level3">
<h3 class="anchored" data-anchor-id="stay-safe">3. Stay Safe</h3>
<ul>
<li>Review settings regularly</li>
<li>Understand data sharing</li>
<li>Make informed choices</li>
</ul>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Machine learning is: 1. Already part of daily life 2. Making things easier 3. Constantly improving 4. Working behind the scenes</p>
<p>Remember: - ML is a tool to help you - You control how to use it - Balance convenience and privacy - Stay informed about changes</p>
</section>
<section id="additional-resources" class="level2">
<h2 class="anchored" data-anchor-id="additional-resources">Additional Resources</h2>
<ol type="1">
<li>For Learning More:
<ul>
<li>“AI Basics” courses on Coursera</li>
<li>YouTube channels about technology</li>
<li>Tech news websites</li>
</ul></li>
<li>For Privacy:
<ul>
<li>Privacy setting guides</li>
<li>Data protection websites</li>
<li>Security best practices</li>
</ul></li>
<li>For Updates:
<ul>
<li>Technology blogs</li>
<li>ML news websites</li>
<li>Company update pages</li>
</ul></li>
</ol>
<p>Remember: Machine learning is here to help make your life easier, but it’s important to use it wisely and stay informed about how it affects your daily activities.</p>


</section>
</section>

 ]]></description>
  <category>machine-learning</category>
  <category>applications</category>
  <category>real-world</category>
  <category>beginner</category>
  <guid>https://ram-polisetti.github.io/BendTheCurve/posts/ml-in-everyday-life/</guid>
  <pubDate>Tue, 19 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://ram-polisetti.github.io/BendTheCurve/posts/ml-in-everyday-life/ml_everyday.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Machine Learning Theory: Mathematical Foundations Made Simple</title>
  <dc:creator>Ram Polisetti</dc:creator>
  <link>https://ram-polisetti.github.io/BendTheCurve/posts/ml-theory-foundations/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What You’ll Learn
</div>
</div>
<div class="callout-body-container callout-body">
<p>This guide will help you understand: - The mathematical foundations of machine learning</p>
<ul>
<li><p>Why ML algorithms work (or fail)</p></li>
<li><p>How to choose and evaluate models</p></li>
<li><p>Real-world applications of ML theory</p></li>
</ul>
</div>
</div>
<section id="machine-learning-theory-mathematical-foundations" class="level1">
<h1>Machine Learning Theory: Mathematical Foundations</h1>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Prerequisites
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><p>Basic calculus (derivatives, integrals)</p></li>
<li><p>Linear algebra fundamentals</p></li>
<li><p>Basic probability theory</p></li>
<li><p>Python programming</p></li>
</ul>
</div>
</div>
<section id="understanding-learning-theory-through-examples" class="level2">
<h2 class="anchored" data-anchor-id="understanding-learning-theory-through-examples">Understanding Learning Theory Through Examples</h2>
<p>Let’s start with a simple example that we’ll build upon:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true" aria-current="page">Code</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Explanation</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Theory Connection</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LinearRegression</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PolynomialFeatures</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate synthetic data</span></span>
<span id="cb1-7">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb1-8">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-9">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X.ravel() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.sin(X.ravel()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fit models of different complexity</span></span>
<span id="cb1-12">models <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> degree <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Different polynomial degrees</span></span>
<span id="cb1-14">    poly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PolynomialFeatures(degree)</span>
<span id="cb1-15">    X_poly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poly.fit_transform(X)</span>
<span id="cb1-16">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression()</span>
<span id="cb1-17">    model.fit(X_poly, y)</span>
<span id="cb1-18">    models.append((degree, model, poly))</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot results</span></span>
<span id="cb1-21">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb1-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, (degree, model, poly) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(models):</span>
<span id="cb1-23">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-24">    plt.scatter(X, y, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Data'</span>)</span>
<span id="cb1-25">    X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-26">    y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(poly.transform(X_test))</span>
<span id="cb1-27">    plt.plot(X_test, y_pred, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r-'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Degree </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>degree<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-28">    plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Polynomial Degree </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>degree<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-29">    plt.legend()</span>
<span id="cb1-30">plt.tight_layout()</span>
<span id="cb1-31">plt.show()</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>This example illustrates: 1. Underfitting (degree 1)</p>
<ol start="2" type="1">
<li><p>Good fit (degree 3)</p></li>
<li><p>Overfitting (degree 15)</p></li>
</ol>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<p>This demonstrates the bias-variance tradeoff: - Low degree = high bias</p>
<ul>
<li>High degree = high variance</li>
</ul>
</div>
</div>
</div>
</section>
<section id="statistical-learning-theory" class="level2">
<h2 class="anchored" data-anchor-id="statistical-learning-theory">Statistical Learning Theory</h2>
<section id="the-learning-problem" class="level3">
<h3 class="anchored" data-anchor-id="the-learning-problem">1. The Learning Problem</h3>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Key Insight
</div>
</div>
<div class="callout-body-container callout-body">
<p>Machine learning is about finding patterns in data that generalize to new, unseen examples.</p>
</div>
</div>
<p>The risk (error) we want to minimize:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AR(f)%20=%20%5Cmathbb%7BE%7D_%7B(X,Y)%5Csim%20P%7D%5BL(f(X),Y)%5D%0A"></p>
<p>In simple terms: - <img src="https://latex.codecogs.com/png.latex?R(f)"> is the expected error - <img src="https://latex.codecogs.com/png.latex?L(f(X),Y)"> is how wrong our prediction is - <img src="https://latex.codecogs.com/png.latex?P"> is the true data distribution</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_risk(model, X, y):</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Calculate empirical risk (mean squared error)"""</span></span>
<span id="cb2-3">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(X)</span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.mean((predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</section>
<section id="empirical-risk-minimization" class="level3">
<h3 class="anchored" data-anchor-id="empirical-risk-minimization">2. Empirical Risk Minimization</h3>
<p>What we actually minimize (because we don’t know P):</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7BR%7D_n(f)%20=%20%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi=1%7D%5En%20L(f(x_i),y_i)%0A"></p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Code Example</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Visual Explanation</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split data</span></span>
<span id="cb3-4">X_train, X_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train model</span></span>
<span id="cb3-7">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression()</span>
<span id="cb3-8">model.fit(X_train, y_train)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate risks</span></span>
<span id="cb3-11">train_risk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_risk(model, X_train, y_train)</span>
<span id="cb3-12">test_risk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_risk(model, X_test, y_test)</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Training Risk: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_risk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Test Risk: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_risk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_risk_curves(degrees, X, y):</span>
<span id="cb4-2">    train_risks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-3">    test_risks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-4">    </span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> degree <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> degrees:</span>
<span id="cb4-6">        poly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PolynomialFeatures(degree)</span>
<span id="cb4-7">        X_poly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poly.fit_transform(X)</span>
<span id="cb4-8">        X_train, X_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X_poly, y)</span>
<span id="cb4-9">        </span>
<span id="cb4-10">        model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression()</span>
<span id="cb4-11">        model.fit(X_train, y_train)</span>
<span id="cb4-12">        </span>
<span id="cb4-13">        train_risks.append(calculate_risk(model, X_train, y_train))</span>
<span id="cb4-14">        test_risks.append(calculate_risk(model, X_test, y_test))</span>
<span id="cb4-15">    </span>
<span id="cb4-16">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb4-17">    plt.plot(degrees, train_risks, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b-'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training Risk'</span>)</span>
<span id="cb4-18">    plt.plot(degrees, test_risks, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r-'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Test Risk'</span>)</span>
<span id="cb4-19">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model Complexity (Polynomial Degree)'</span>)</span>
<span id="cb4-20">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Risk (MSE)'</span>)</span>
<span id="cb4-21">    plt.legend()</span>
<span id="cb4-22">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training vs Test Risk'</span>)</span>
<span id="cb4-23">    plt.show()</span>
<span id="cb4-24"></span>
<span id="cb4-25">plot_risk_curves(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>), X, y)</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="generalization-bounds" class="level3">
<h3 class="anchored" data-anchor-id="generalization-bounds">3. Generalization Bounds</h3>
<p>Hoeffding’s inequality gives us confidence bounds:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP(%7C%5Chat%7BR%7D_n(f)%20-%20R(f)%7C%20%3E%20%5Cepsilon)%20%5Cleq%202%5Cexp(-2n%5Cepsilon%5E2)%0A"></p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Practical Interpretation
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>More data (larger n) = tighter bounds</li>
<li>Higher confidence = larger epsilon</li>
<li>Helps determine required dataset size</li>
</ul>
</div>
</div>
</section>
</section>
<section id="model-complexity-and-overfitting" class="level2">
<h2 class="anchored" data-anchor-id="model-complexity-and-overfitting">Model Complexity and Overfitting</h2>
<section id="vc-dimension" class="level3">
<h3 class="anchored" data-anchor-id="vc-dimension">1. VC Dimension</h3>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">Concept</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">Visualization</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<p>VC dimension measures model complexity: - Higher VC dimension = more complex model - More complex ≠ better performance - Helps choose model capacity</p>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_vc_bound(n_samples, vc_dim):</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Plot generalization bound vs sample size"""</span></span>
<span id="cb5-3">    epsilons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb5-4">    bounds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-5">    </span>
<span id="cb5-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> eps <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> epsilons:</span>
<span id="cb5-7">        bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_samples) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> vc_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> eps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb5-8">        bounds.append(bound)</span>
<span id="cb5-9">    </span>
<span id="cb5-10">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb5-11">    plt.plot(epsilons, bounds)</span>
<span id="cb5-12">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Epsilon'</span>)</span>
<span id="cb5-13">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probability of Large Deviation'</span>)</span>
<span id="cb5-14">    plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'VC Generalization Bound (n=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n_samples<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, VC-dim=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vc_dim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb5-15">    plt.show()</span>
<span id="cb5-16"></span>
<span id="cb5-17">plot_vc_bound(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</div>
</div>
</div>
</section>
</section>
<section id="optimization-theory" class="level2">
<h2 class="anchored" data-anchor-id="optimization-theory">Optimization Theory</h2>
<section id="gradient-descent-visualization" class="level3">
<h3 class="anchored" data-anchor-id="gradient-descent-visualization">1. Gradient Descent Visualization</h3>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_gradient_descent():</span>
<span id="cb6-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Visualize gradient descent optimization"""</span></span>
<span id="cb6-3">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb6-4">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb6-5">    X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.meshgrid(x, y)</span>
<span id="cb6-6">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simple quadratic function</span></span>
<span id="cb6-7">    </span>
<span id="cb6-8">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb6-9">    plt.contour(X, Y, Z, levels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb6-10">    </span>
<span id="cb6-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate gradient descent</span></span>
<span id="cb6-12">    point <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span>])</span>
<span id="cb6-13">    lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb6-14">    path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [point]</span>
<span id="cb6-15">    </span>
<span id="cb6-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb6-17">        gradient <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> point</span>
<span id="cb6-18">        point <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> point <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> gradient</span>
<span id="cb6-19">        path.append(point)</span>
<span id="cb6-20">    </span>
<span id="cb6-21">    path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(path)</span>
<span id="cb6-22">    plt.plot(path[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], path[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r.-'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gradient Descent Path'</span>)</span>
<span id="cb6-23">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb6-24">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="cb6-25">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gradient Descent Optimization'</span>)</span>
<span id="cb6-26">    plt.legend()</span>
<span id="cb6-27">    plt.show()</span>
<span id="cb6-28"></span>
<span id="cb6-29">plot_gradient_descent()</span></code></pre></div>
</section>
<section id="convex-optimization" class="level3">
<h3 class="anchored" data-anchor-id="convex-optimization">2. Convex Optimization</h3>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Why Convexity Matters
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Guarantees global minimum</li>
<li>Faster convergence</li>
<li>No local minima problems</li>
</ul>
</div>
</div>
</section>
</section>
<section id="practical-applications" class="level2">
<h2 class="anchored" data-anchor-id="practical-applications">Practical Applications</h2>
<section id="model-selection" class="level3">
<h3 class="anchored" data-anchor-id="model-selection">1. Model Selection</h3>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cross_val_score</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> select_best_model(X, y, max_degree<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>):</span>
<span id="cb7-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Select best polynomial degree using cross-validation"""</span></span>
<span id="cb7-5">    scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-6">    degrees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, max_degree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-7">    </span>
<span id="cb7-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> degree <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> degrees:</span>
<span id="cb7-9">        poly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PolynomialFeatures(degree)</span>
<span id="cb7-10">        X_poly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poly.fit_transform(X)</span>
<span id="cb7-11">        model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression()</span>
<span id="cb7-12">        score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(cross_val_score(model, X_poly, y, cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb7-13">        scores.append(score)</span>
<span id="cb7-14">    </span>
<span id="cb7-15">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb7-16">    plt.plot(degrees, scores, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bo-'</span>)</span>
<span id="cb7-17">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Polynomial Degree'</span>)</span>
<span id="cb7-18">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cross-Validation Score'</span>)</span>
<span id="cb7-19">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model Selection using Cross-Validation'</span>)</span>
<span id="cb7-20">    plt.show()</span>
<span id="cb7-21">    </span>
<span id="cb7-22">    best_degree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> degrees[np.argmax(scores)]</span>
<span id="cb7-23">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Best polynomial degree: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>best_degree<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> best_degree</span>
<span id="cb7-25"></span>
<span id="cb7-26">best_degree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> select_best_model(X, y)</span></code></pre></div>
</section>
</section>
<section id="common-pitfalls-and-solutions" class="level2">
<h2 class="anchored" data-anchor-id="common-pitfalls-and-solutions">Common Pitfalls and Solutions</h2>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Watch Out For
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><strong>Overfitting</strong>
<ul>
<li>Solution: Regularization, cross-validation</li>
</ul></li>
<li><strong>Underfitting</strong>
<ul>
<li>Solution: Increase model complexity, feature engineering</li>
</ul></li>
<li><strong>Poor Generalization</strong>
<ul>
<li>Solution: More training data, simpler models</li>
</ul></li>
</ol>
</div>
</div>
</section>
<section id="further-reading" class="level2">
<h2 class="anchored" data-anchor-id="further-reading">Further Reading</h2>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">Books</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false">Online Resources</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-3" aria-controls="tabset-4-3" aria-selected="false">Interactive Tools</a></li></ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<ul>
<li>“Understanding Machine Learning” by Shai Shalev-Shwartz</li>
<li>“Statistical Learning Theory” by Vladimir Vapnik</li>
<li>“Foundations of Machine Learning” by Mehryar Mohri</li>
</ul>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<ul>
<li>Stanford CS229 Course Notes</li>
<li>“Mathematics for Machine Learning” (free online book)</li>
<li>Deep Learning Book (Goodfellow et al.)</li>
</ul>
</div>
<div id="tabset-4-3" class="tab-pane" aria-labelledby="tabset-4-3-tab">
<ul>
<li>Google Colab notebooks</li>
<li>TensorFlow Playground</li>
<li>ML Visualization Tools</li>
</ul>
</div>
</div>
</div>
</section>
<section id="related-posts" class="level2">
<h2 class="anchored" data-anchor-id="related-posts">Related Posts</h2>
</section>
<section id="continue-your-learning-journey" class="level2 related-posts-section">
<h2 class="anchored" data-anchor-id="continue-your-learning-journey">Continue Your Learning Journey</h2>
<div id="related-posts">

</div>
</section>
<p>Remember: Theory provides the foundation for understanding why ML works, but always combine it with practical implementation for better learning!</p>


</section>

 ]]></description>
  <category>machine-learning</category>
  <category>theory</category>
  <category>mathematics</category>
  <category>statistics</category>
  <guid>https://ram-polisetti.github.io/BendTheCurve/posts/ml-theory-foundations/</guid>
  <pubDate>Tue, 19 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://ram-polisetti.github.io/BendTheCurve/posts/ml-theory-foundations/ml_theory.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Online Learning and Regret Minimization</title>
  <dc:creator>Ram Polisetti</dc:creator>
  <link>https://ram-polisetti.github.io/BendTheCurve/posts/online-learning/</link>
  <description><![CDATA[ 





<p>listing: contents: “../**/index.qmd” type: default fields: [title, description, date, author] sort: “date desc” max-items: 2 filter-ui: false categories: false include-in-header: false feed: true date-format: “MMMM D, YYYY”</p>
<hr>
<p>::: :::</p>



 ]]></description>
  <category>machine-learning</category>
  <category>theory</category>
  <category>mathematics</category>
  <category>online-learning</category>
  <guid>https://ram-polisetti.github.io/BendTheCurve/posts/online-learning/</guid>
  <pubDate>Tue, 19 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://ram-polisetti.github.io/BendTheCurve/posts/online-learning/online_learning.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Optimization Algorithms in Machine Learning: A Deep Dive</title>
  <dc:creator>Ram Polisetti</dc:creator>
  <link>https://ram-polisetti.github.io/BendTheCurve/posts/optimization-algorithms/</link>
  <description><![CDATA[ 





<p>listing: contents: “../**/index.qmd” type: default fields: [title, description, date, author] sort: “date desc” max-items: 2 filter-ui: false categories: false include-in-header: false feed: true date-format: “MMMM D, YYYY”</p>
<hr>
<p>::: :::</p>



 ]]></description>
  <category>machine-learning</category>
  <category>optimization</category>
  <category>mathematics</category>
  <category>algorithms</category>
  <guid>https://ram-polisetti.github.io/BendTheCurve/posts/optimization-algorithms/</guid>
  <pubDate>Tue, 19 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://ram-polisetti.github.io/BendTheCurve/posts/optimization-algorithms/optimization.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Optimization Theory in Machine Learning</title>
  <dc:creator>Ram Polisetti</dc:creator>
  <link>https://ram-polisetti.github.io/BendTheCurve/posts/optimization-theory/</link>
  <description><![CDATA[ 





<p>listing: contents: “../**/index.qmd” type: default fields: [title, description, date, author] sort: “date desc” max-items: 2 filter-ui: false categories: false include-in-header: false feed: true date-format: “MMMM D, YYYY”</p>
<hr>
<p>::: :::</p>



 ]]></description>
  <category>machine-learning</category>
  <category>optimization</category>
  <category>mathematics</category>
  <category>theory</category>
  <guid>https://ram-polisetti.github.io/BendTheCurve/posts/optimization-theory/</guid>
  <pubDate>Tue, 19 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://ram-polisetti.github.io/BendTheCurve/posts/optimization-theory/optimization_theory.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Probabilistic Graphical Models: Mathematical Foundations</title>
  <dc:creator>Ram Polisetti</dc:creator>
  <link>https://ram-polisetti.github.io/BendTheCurve/posts/probabilistic-graphical-models/</link>
  <description><![CDATA[ 





<p>listing: contents: “../**/index.qmd” type: default fields: [title, description, date, author] sort: “date desc” max-items: 2 filter-ui: false categories: false include-in-header: false feed: true date-format: “MMMM D, YYYY”</p>
<hr>
<p>::: :::</p>



 ]]></description>
  <category>machine-learning</category>
  <category>probabilistic-models</category>
  <category>mathematics</category>
  <category>bayesian</category>
  <guid>https://ram-polisetti.github.io/BendTheCurve/posts/probabilistic-graphical-models/</guid>
  <pubDate>Tue, 19 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://ram-polisetti.github.io/BendTheCurve/posts/probabilistic-graphical-models/pgm.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Understanding Reinforcement Learning: A Beginner’s Guide</title>
  <dc:creator>Ram Polisetti</dc:creator>
  <link>https://ram-polisetti.github.io/BendTheCurve/posts/reinforcement-learning-basics/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What You’ll Learn
</div>
</div>
<div class="callout-body-container callout-body">
<p>By the end of this guide, you’ll understand: - The basic concepts of reinforcement learning - How agents learn from experience - Real-world applications - How to implement a simple RL algorithm</p>
</div>
</div>
<section id="understanding-reinforcement-learning-learning-from-experience" class="level1">
<h1>Understanding Reinforcement Learning: Learning from Experience</h1>
<p>Have you ever wondered how animals learn through trial and error? Or how a child learns to ride a bicycle? These are perfect examples of reinforcement learning in nature. Let’s explore this fascinating field of machine learning in a way that’s easy to understand.</p>
<section id="what-is-reinforcement-learning" class="level2">
<h2 class="anchored" data-anchor-id="what-is-reinforcement-learning">What is Reinforcement Learning?</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Key Insight
</div>
</div>
<div class="callout-body-container callout-body">
<p>Reinforcement Learning (RL) is about learning to make decisions by interacting with an environment. Think of it as learning from experience, just like humans do!</p>
</div>
</div>
<p>Imagine teaching a dog new tricks: 1. Give treats when the dog performs correctly (reward) 2. Don’t give treats when it performs incorrectly (no reward) 3. The dog learns to associate actions with rewards</p>
<p>This is exactly how reinforcement learning works! It’s about: - Learning what to do (actions) - How to map situations to actions (strategy) - Maximizing a numerical reward signal</p>
</section>
<section id="your-first-rl-algorithm" class="level2">
<h2 class="anchored" data-anchor-id="your-first-rl-algorithm">Your First RL Algorithm</h2>
<p>Let’s implement a simple Q-learning algorithm in Python:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true" aria-current="page">Code</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Explanation</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Output Visualization</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SimpleQLearning:</span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, states, actions, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, discount<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>):</span>
<span id="cb1-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.q_table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((states, actions))</span>
<span id="cb1-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learning_rate</span>
<span id="cb1-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gamma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> discount</span>
<span id="cb1-8">    </span>
<span id="cb1-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_action(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state, epsilon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>):</span>
<span id="cb1-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exploration vs exploitation</span></span>
<span id="cb1-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.random.random() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> epsilon:</span>
<span id="cb1-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.random.randint(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.q_table.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb1-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.argmax(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.q_table[state])</span>
<span id="cb1-14">    </span>
<span id="cb1-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> learn(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state, action, reward, next_state):</span>
<span id="cb1-16">        old_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.q_table[state, action]</span>
<span id="cb1-17">        next_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.q_table[next_state])</span>
<span id="cb1-18">        </span>
<span id="cb1-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Q-learning formula</span></span>
<span id="cb1-20">        new_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> old_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gamma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> next_max)</span>
<span id="cb1-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.q_table[state, action] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_value</span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb1-24">env_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5 states</span></span>
<span id="cb1-25">n_actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4 possible actions</span></span>
<span id="cb1-26">agent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SimpleQLearning(env_size, n_actions)</span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning loop (simplified)</span></span>
<span id="cb1-29">state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-30"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb1-31">    action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> agent.get_action(state)</span>
<span id="cb1-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate environment (in real case, this would be your environment)</span></span>
<span id="cb1-33">    next_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, env_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-34">    reward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> next_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> env_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-35">    </span>
<span id="cb1-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learn from experience</span></span>
<span id="cb1-37">    agent.learn(state, action, reward, next_state)</span>
<span id="cb1-38">    state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> next_state</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>This code demonstrates: 1. Creating a Q-learning agent 2. Balancing exploration vs exploitation 3. Learning from experience 4. Updating Q-values based on rewards</p>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize Q-table</span></span>
<span id="cb2-5">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb2-6">sns.heatmap(agent.q_table, annot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, fmt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.2f'</span>)</span>
<span id="cb2-7">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Actions'</span>)</span>
<span id="cb2-8">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'States'</span>)</span>
<span id="cb2-9">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Q-values After Learning'</span>)</span>
<span id="cb2-10">plt.show()</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="key-components-of-reinforcement-learning" class="level2">
<h2 class="anchored" data-anchor-id="key-components-of-reinforcement-learning">Key Components of Reinforcement Learning</h2>
<section id="the-agent" class="level3">
<h3 class="anchored" data-anchor-id="the-agent">1. The Agent</h3>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>The agent is the learner and decision-maker. Like a player in a game, it: - Observes the environment - Makes decisions (takes actions) - Receives rewards - Updates its strategy</p>
</div>
</div>
</section>
<section id="the-environment" class="level3">
<h3 class="anchored" data-anchor-id="the-environment">2. The Environment</h3>
<p>The world the agent interacts with:</p>
<pre><code>┌────────────────────────┐
│      Environment      │
│   ┌──────────────┐    │
│   │    State     │    │
│   └──────────────┘    │
│          ↑↓           │
│   ┌──────────────┐    │
│   │    Agent     │    │
│   └──────────────┘    │
│          ↑↓           │
│   ┌──────────────┐    │
│   │    Reward    │    │
│   └──────────────┘    │
└────────────────────────┘</code></pre>
</section>
<section id="states-and-actions" class="level3">
<h3 class="anchored" data-anchor-id="states-and-actions">3. States and Actions</h3>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">States</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Actions</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<p>Current situation: - Position in a maze - Game board configuration - Robot’s location</p>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<p>Possible choices: - Move: Up, Down, Left, Right - Game moves: Place piece, Attack, Defend - Trading: Buy, Sell, Hold</p>
</div>
</div>
</div>
</section>
</section>
<section id="practical-applications" class="level2">
<h2 class="anchored" data-anchor-id="practical-applications">Practical Applications</h2>
<section id="game-ai" class="level3">
<h3 class="anchored" data-anchor-id="game-ai">1. Game AI</h3>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example: Teaching an AI to Play Tic-Tac-Toe
</div>
</div>
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> TicTacToeEnv:</span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.board <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb4-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_player <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-5">    </span>
<span id="cb4-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_state(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.board.flatten())</span>
<span id="cb4-8">    </span>
<span id="cb4-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> make_move(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, position):</span>
<span id="cb4-10">        row, col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb4-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.board[row, col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-12">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.board[row, col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_player</span>
<span id="cb4-13">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_player <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb4-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
</div>
</div>
</section>
<section id="robotics" class="level3">
<h3 class="anchored" data-anchor-id="robotics">2. Robotics</h3>
<p>Teaching robots to: - Navigate environments - Manipulate objects - Learn from demonstrations</p>
</section>
<section id="business-applications" class="level3">
<h3 class="anchored" data-anchor-id="business-applications">3. Business Applications</h3>
<ul>
<li>Inventory management</li>
<li>Resource allocation</li>
<li>Marketing optimization</li>
</ul>
</section>
</section>
<section id="advanced-concepts" class="level2">
<h2 class="anchored" data-anchor-id="advanced-concepts">Advanced Concepts</h2>
<section id="deep-reinforcement-learning" class="level3">
<h3 class="anchored" data-anchor-id="deep-reinforcement-learning">1. Deep Reinforcement Learning</h3>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">Concept</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">Example Architecture</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<p>Combining neural networks with RL: - Handle complex state spaces - Learn features automatically - Scale to real-world problems</p>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_dqn(state_size, action_size):</span>
<span id="cb5-4">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.Sequential([</span>
<span id="cb5-5">        tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, input_shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(state_size,)),</span>
<span id="cb5-6">        tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>),</span>
<span id="cb5-7">        tf.keras.layers.Dense(action_size, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'linear'</span>)</span>
<span id="cb5-8">    ])</span>
<span id="cb5-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="policy-gradients" class="level3">
<h3 class="anchored" data-anchor-id="policy-gradients">2. Policy Gradients</h3>
<p>Learning the policy directly:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> policy_network(state_size, action_size):</span>
<span id="cb6-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> tf.keras.Sequential([</span>
<span id="cb6-3">        tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>),</span>
<span id="cb6-4">        tf.keras.layers.Dense(action_size, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'softmax'</span>)</span>
<span id="cb6-5">    ])</span></code></pre></div>
</section>
</section>
<section id="getting-started" class="level2">
<h2 class="anchored" data-anchor-id="getting-started">Getting Started</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning Path
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><strong>Basics</strong>: Start with Q-learning</li>
<li><strong>Practice</strong>: Implement simple environments</li>
<li><strong>Tools</strong>: Learn OpenAI Gym</li>
<li><strong>Advanced</strong>: Move to deep RL</li>
</ol>
</div>
</div>
<section id="resources" class="level3">
<h3 class="anchored" data-anchor-id="resources">Resources</h3>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">Online Courses</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false">Libraries</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-3" aria-controls="tabset-4-3" aria-selected="false">Books</a></li></ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<ul>
<li>Coursera’s RL Specialization</li>
<li>David Silver’s RL Course</li>
<li>Fast.ai’s Practical Deep Learning</li>
</ul>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<ul>
<li>OpenAI Gym</li>
<li>Stable Baselines3</li>
<li>TensorFlow Agents</li>
</ul>
</div>
<div id="tabset-4-3" class="tab-pane" aria-labelledby="tabset-4-3-tab">
<ul>
<li>“Reinforcement Learning: An Introduction” by Sutton &amp; Barto</li>
<li>“Deep Reinforcement Learning Hands-On”</li>
</ul>
</div>
</div>
</div>
</section>
</section>
<section id="practice-projects" class="level2">
<h2 class="anchored" data-anchor-id="practice-projects">Practice Projects</h2>
<ol type="1">
<li><strong>Simple Games</strong>
<ul>
<li>Tic-tac-toe</li>
<li>Cart-pole balancing</li>
<li>Grid world navigation</li>
</ul></li>
<li><strong>Advanced Projects</strong>
<ul>
<li>Stock trading bot</li>
<li>Robot simulation</li>
<li>Game AI development</li>
</ul></li>
</ol>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Common Pitfalls
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Starting too complex</li>
<li>Ignoring exploration</li>
<li>Poor reward design</li>
<li>Insufficient training time</li>
</ul>
</div>
</div>
<p>Remember: Start simple, experiment often, and gradually increase complexity. Reinforcement learning is a powerful tool, but it requires patience and practice to master!</p>


</section>
</section>

 ]]></description>
  <category>machine-learning</category>
  <category>reinforcement-learning</category>
  <category>theory</category>
  <category>beginner</category>
  <guid>https://ram-polisetti.github.io/BendTheCurve/posts/reinforcement-learning-basics/</guid>
  <pubDate>Tue, 19 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://ram-polisetti.github.io/BendTheCurve/posts/reinforcement-learning-basics/rl_basics.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Statistical Learning Theory and Concentration Inequalities</title>
  <dc:creator>Ram Polisetti</dc:creator>
  <link>https://ram-polisetti.github.io/BendTheCurve/posts/statistical-learning-theory/</link>
  <description><![CDATA[ 





<p>listing: contents: “../**/index.qmd” type: default fields: [title, description, date, author] sort: “date desc” max-items: 2 filter-ui: false categories: false include-in-header: false feed: true date-format: “MMMM D, YYYY”</p>
<hr>
<p>::: :::</p>



 ]]></description>
  <category>machine-learning</category>
  <category>theory</category>
  <category>mathematics</category>
  <category>statistics</category>
  <guid>https://ram-polisetti.github.io/BendTheCurve/posts/statistical-learning-theory/</guid>
  <pubDate>Tue, 19 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://ram-polisetti.github.io/BendTheCurve/posts/statistical-learning-theory/statistical_learning.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>PAC Learning Theory and VC Dimension</title>
  <dc:creator>Ram Polisetti</dc:creator>
  <link>https://ram-polisetti.github.io/BendTheCurve/posts/pac-learning-theory/</link>
  <description><![CDATA[ 





<section id="pac-learning-theory-and-vc-dimension" class="level1">
<h1>PAC Learning Theory and VC Dimension</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning Objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p>By the end of this article, you will: 1. Understand PAC learning intuitively and mathematically 2. Visualize VC dimension in practice 3. Calculate sample complexity for real problems 4. Implement PAC learning algorithms 5. Apply VC theory to model selection</p>
</div>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Imagine you’re teaching a robot to recognize apples . How can you be “probably approximately correct” about its ability to recognize any apple? PAC learning theory gives us the mathematical framework to answer such questions.</p>
<div id="8e32648e" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.svm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SVC</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> make_classification, make_circles</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> learning_curve</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set random seed for reproducibility</span></span>
<span id="cb1-10">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="pac-learning-visualization" class="level2">
<h2 class="anchored" data-anchor-id="pac-learning-visualization">1. PAC Learning Visualization</h2>
<p>Let’s visualize what “probably approximately correct” means:</p>
<div id="c24ec661" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> visualize_pac_learning(n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, noise_level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>):</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate synthetic dataset</span></span>
<span id="cb2-3">    X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_circles(n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples, noise<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>noise_level, factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb2-4">    </span>
<span id="cb2-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train models with different sample sizes</span></span>
<span id="cb2-6">    sample_sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, n_samples]</span>
<span id="cb2-7">    fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))</span>
<span id="cb2-8">    axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes.ravel()</span>
<span id="cb2-9">    </span>
<span id="cb2-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, size <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(sample_sizes):</span>
<span id="cb2-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train model on subset</span></span>
<span id="cb2-12">        model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SVC(kernel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rbf'</span>)</span>
<span id="cb2-13">        idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(n_samples, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>size, replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb2-14">        model.fit(X[idx], y[idx])</span>
<span id="cb2-15">        </span>
<span id="cb2-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create grid for decision boundary</span></span>
<span id="cb2-17">        xx, yy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.meshgrid(np.linspace(X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>),</span>
<span id="cb2-18">                            np.linspace(X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb2-19">        Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(np.c_[xx.ravel(), yy.ravel()])</span>
<span id="cb2-20">        Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z.reshape(xx.shape)</span>
<span id="cb2-21">        </span>
<span id="cb2-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot</span></span>
<span id="cb2-23">        axes[i].contourf(xx, yy, Z, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>)</span>
<span id="cb2-24">        axes[i].scatter(X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>)</span>
<span id="cb2-25">        axes[i].set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Training samples: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-26">    </span>
<span id="cb2-27">    plt.tight_layout()</span>
<span id="cb2-28">    plt.show()</span>
<span id="cb2-29"></span>
<span id="cb2-30">visualize_pac_learning()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://ram-polisetti.github.io/BendTheCurve/posts/pac-learning-theory/index_files/figure-html/cell-3-output-1.png" width="1142" height="1141" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Key Insight
</div>
</div>
<div class="callout-body-container callout-body">
<p>Notice how the decision boundary becomes more stable and accurate as we increase the sample size. This is PAC learning in action!</p>
</div>
</div>
</section>
<section id="vc-dimension-explorer" class="level2">
<h2 class="anchored" data-anchor-id="vc-dimension-explorer">2. VC Dimension Explorer</h2>
<p>Let’s create an interactive tool to explore VC dimension:</p>
<div id="b128207c" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> explore_vc_dimension(n_points<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate_points(n):</span>
<span id="cb3-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.random.rand(n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-4">    </span>
<span id="cb3-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_linear_classifier(ax, points, labels):</span>
<span id="cb3-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(points) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb3-7">            model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SVC(kernel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'linear'</span>)</span>
<span id="cb3-8">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb3-9">                model.fit(points, labels)</span>
<span id="cb3-10">                </span>
<span id="cb3-11">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot decision boundary</span></span>
<span id="cb3-12">                xx, yy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.meshgrid(np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>),</span>
<span id="cb3-13">                                   np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb3-14">                Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(np.c_[xx.ravel(), yy.ravel()])</span>
<span id="cb3-15">                Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z.reshape(xx.shape)</span>
<span id="cb3-16">                ax.contourf(xx, yy, Z, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>)</span>
<span id="cb3-17">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span>:</span>
<span id="cb3-18">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb3-19">        </span>
<span id="cb3-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot points</span></span>
<span id="cb3-21">        colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> labels]</span>
<span id="cb3-22">        ax.scatter(points[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], points[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors)</span>
<span id="cb3-23">        ax.set_xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-24">        ax.set_ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-25">    </span>
<span id="cb3-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate different labelings</span></span>
<span id="cb3-27">    points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_points(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Try with 3 points</span></span>
<span id="cb3-28">    all_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(j, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">b'</span>)] </span>
<span id="cb3-29">                 <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)]</span>
<span id="cb3-30">    </span>
<span id="cb3-31">    fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb3-32">    axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes.ravel()</span>
<span id="cb3-33">    </span>
<span id="cb3-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, labels <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(all_labels):</span>
<span id="cb3-35">        plot_linear_classifier(axes[i], points, labels)</span>
<span id="cb3-36">        axes[i].set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Labeling </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb3-37">    </span>
<span id="cb3-38">    plt.tight_layout()</span>
<span id="cb3-39">    plt.show()</span>
<span id="cb3-40"></span>
<span id="cb3-41">explore_vc_dimension()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://ram-polisetti.github.io/BendTheCurve/posts/pac-learning-theory/index_files/figure-html/cell-4-output-1.png" width="1526" height="757" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Understanding VC Dimension
</div>
</div>
<div class="callout-body-container callout-body">
<p>The plots above show different possible labelings of 3 points. A linear classifier (VC dimension = 3) can shatter these points in most, but not all configurations.</p>
</div>
</div>
</section>
<section id="theoretical-foundations" class="level2">
<h2 class="anchored" data-anchor-id="theoretical-foundations">Theoretical Foundations</h2>
<section id="pac-learning-framework" class="level3">
<h3 class="anchored" data-anchor-id="pac-learning-framework">1. PAC Learning Framework</h3>
<p>The PAC (Probably Approximately Correct) learning framework provides theoretical guarantees for learning algorithms:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP_%7BS%20%5Csim%20%5Cmathcal%7BD%7D%5Em%7D(%5Ctext%7Berror%7D_%5Cmathcal%7BD%7D(h_S)%20%5Cleq%20%5Cepsilon)%20%5Cgeq%201-%5Cdelta%0A"></p>
<p>Where: - <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> is the accuracy parameter (how close to perfect) - <img src="https://latex.codecogs.com/png.latex?%5Cdelta"> is the confidence parameter (how sure we are) - <img src="https://latex.codecogs.com/png.latex?m"> is the sample size - <img src="https://latex.codecogs.com/png.latex?h_S"> is the learned hypothesis</p>
</section>
<section id="sample-complexity" class="level3">
<h3 class="anchored" data-anchor-id="sample-complexity">2. Sample Complexity</h3>
<p>The fundamental bound for sample complexity:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Am%20%5Cgeq%20%5Cfrac%7B1%7D%7B%5Cepsilon%7D%5Cleft(%5Cln%7C%5Cmathcal%7BH%7D%7C%20+%20%5Cln%5Cfrac%7B1%7D%7B%5Cdelta%7D%5Cright)%0A"></p>
<p>For the realizable case (when perfect classification is possible):</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Am%20%5Cgeq%20%5Cfrac%7B1%7D%7B%5Cepsilon%7D%5Cleft(%5Cln%5Cfrac%7B1%7D%7B%5Cdelta%7D%5Cright)%0A"></p>
</section>
<section id="vc-dimension-theory" class="level3">
<h3 class="anchored" data-anchor-id="vc-dimension-theory">3. VC Dimension Theory</h3>
<p>The VC dimension of a hypothesis class <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BH%7D"> is the largest number of points that can be shattered (assigned any possible labeling) by <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BH%7D">.</p>
<p>Growth function:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5CPi_%5Cmathcal%7BH%7D(m)%20=%20%5Cmax_%7Bx_1,...,x_m%20%5Cin%20%5Cmathcal%7BX%7D%7D%7C%5C%7B(h(x_1),...,h(x_m)):%20h%20%5Cin%20%5Cmathcal%7BH%7D%5C%7D%7C%0A"></p>
<p>Sauer’s Lemma:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BIf%20VC%7D(%5Cmathcal%7BH%7D)%20=%20d,%20%5Ctext%7B%20then%20%7D%20%5CPi_%5Cmathcal%7BH%7D(m)%20%5Cleq%20%5Csum_%7Bi=0%7D%5Ed%20%5Cbinom%7Bm%7D%7Bi%7D%0A"></p>
</section>
<section id="generalization-bounds" class="level3">
<h3 class="anchored" data-anchor-id="generalization-bounds">4. Generalization Bounds</h3>
<p>The fundamental theorem of learning theory:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP(%5Csup_%7Bh%20%5Cin%20%5Cmathcal%7BH%7D%7D%7C%5Ctext%7Berror%7D_%5Cmathcal%7BD%7D(h)%20-%20%5Cwidehat%7B%5Ctext%7Berror%7D%7D_S(h)%7C%20%3E%20%5Cepsilon)%20%5Cleq%204%5CPi_%5Cmathcal%7BH%7D(2m)%5Cexp(-%5Cfrac%7Bm%5Cepsilon%5E2%7D%7B8%7D)%0A"></p>
<p>Sample complexity in terms of VC dimension:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Am%20=%20O%5Cleft(%5Cfrac%7Bd%7D%7B%5Cepsilon%5E2%7D%5Cln%5Cfrac%7B1%7D%7B%5Cepsilon%7D%20+%20%5Cfrac%7B1%7D%7B%5Cepsilon%5E2%7D%5Cln%5Cfrac%7B1%7D%7B%5Cdelta%7D%5Cright)%0A"></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Key Insight
</div>
</div>
<div class="callout-body-container callout-body">
<p>The VC dimension (<img src="https://latex.codecogs.com/png.latex?d">) appears in the sample complexity bound, showing how model complexity affects learning guarantees.</p>
</div>
</div>
</section>
</section>
<section id="pac-learning-framework-1" class="level2">
<h2 class="anchored" data-anchor-id="pac-learning-framework-1">PAC Learning Framework</h2>
<section id="basic-definitions" class="level3">
<h3 class="anchored" data-anchor-id="basic-definitions">1. Basic Definitions</h3>
<p>Let’s make PAC learning concrete with an example:</p>
<div id="1c007355" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> PACLearner:</span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, epsilon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, delta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>):</span>
<span id="cb4-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> epsilon  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># accuracy parameter</span></span>
<span id="cb4-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.delta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> delta    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># confidence parameter</span></span>
<span id="cb4-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb4-6">    </span>
<span id="cb4-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> required_samples(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, vc_dim):</span>
<span id="cb4-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Calculate required sample size using VC bound"""</span></span>
<span id="cb4-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(np.ceil((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epsilon) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> </span>
<span id="cb4-10">                         (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>vc_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epsilon) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-11">                          np.log2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.delta))))</span>
<span id="cb4-12">    </span>
<span id="cb4-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, X, y):</span>
<span id="cb4-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Train model with PAC guarantees"""</span></span>
<span id="cb4-15">        n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(X)</span>
<span id="cb4-16">        required <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.required_samples(vc_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for linear classifier</span></span>
<span id="cb4-17">        </span>
<span id="cb4-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> required:</span>
<span id="cb4-19">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Warning: Need at least </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>required<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> samples for PAC guarantees"</span>)</span>
<span id="cb4-20">        </span>
<span id="cb4-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SVC(kernel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'linear'</span>)</span>
<span id="cb4-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.fit(X, y)</span>
<span id="cb4-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span></span>
<span id="cb4-24">    </span>
<span id="cb4-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> predict(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, X):</span>
<span id="cb4-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.predict(X)</span>
<span id="cb4-27"></span>
<span id="cb4-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb4-29">X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_classification(n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, n_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, n_redundant<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb4-30">                          n_informative<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb4-31">learner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PACLearner(epsilon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, delta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb4-32"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Required samples: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>learner<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>required_samples(vc_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-33">learner.fit(X, y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Required samples: 3941
Warning: Need at least 3941 samples for PAC guarantees</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>&lt;__main__.PACLearner at 0x16c51beb0&gt;</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Practical PAC Learning
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Choose your desired accuracy (ε) and confidence (δ)</li>
<li>Calculate required sample size using VC dimension</li>
<li>Collect enough samples to meet PAC guarantees</li>
<li>Train your model on the collected samples</li>
</ol>
</div>
</div>
</section>
</section>
<section id="advanced-topics" class="level2">
<h2 class="anchored" data-anchor-id="advanced-topics">Advanced Topics</h2>
<section id="rademacher-complexity" class="level3">
<h3 class="anchored" data-anchor-id="rademacher-complexity">1. Rademacher Complexity</h3>
<p>Rademacher complexity measures the richness of a hypothesis class:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathfrak%7BR%7D_S(%5Cmathcal%7BH%7D)%20=%20%5Cmathbb%7BE%7D_%5Csigma%5Cleft%5B%5Csup_%7Bh%20%5Cin%20%5Cmathcal%7BH%7D%7D%5Cfrac%7B1%7D%7Bm%7D%5Csum_%7Bi=1%7D%5Em%20%5Csigma_i%20h(x_i)%5Cright%5D%0A"></p>
</section>
<section id="agnostic-pac-learning" class="level3">
<h3 class="anchored" data-anchor-id="agnostic-pac-learning">2. Agnostic PAC Learning</h3>
<p>For the non-realizable case:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Berror%7D_%5Cmathcal%7BD%7D(h)%20%5Cleq%20%5Cmin_%7Bh'%20%5Cin%20%5Cmathcal%7BH%7D%7D%5Ctext%7Berror%7D_%5Cmathcal%7BD%7D(h')%20+%20%5Cepsilon%0A"></p>
<p>Sample complexity:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Am%20%5Cgeq%20%5Cfrac%7B2%7D%7B%5Cepsilon%5E2%7D%5Cleft(%5Cln%7C%5Cmathcal%7BH%7D%7C%20+%20%5Cln%5Cfrac%7B2%7D%7B%5Cdelta%7D%5Cright)%0A"></p>
</section>
<section id="structural-risk-minimization" class="level3">
<h3 class="anchored" data-anchor-id="structural-risk-minimization">3. Structural Risk Minimization</h3>
<p>For nested hypothesis classes <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BH%7D_1%20%5Csubset%20%5Cmathcal%7BH%7D_2%20%5Csubset%20...%20%5Csubset%20%5Cmathcal%7BH%7D_k">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Bpen%7D(h)%20=%20%5Csqrt%7B%5Cfrac%7B%5Ctext%7BVC%7D(%5Cmathcal%7BH%7D(h))%5Cln(em/%5Ctext%7BVC%7D(%5Cmathcal%7BH%7D(h)))%20+%20%5Cln(1/%5Cdelta)%7D%7Bm%7D%7D%0A"></p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Practical Application
</div>
</div>
<div class="callout-body-container callout-body">
<p>Use structural risk minimization to automatically select model complexity based on your dataset size.</p>
</div>
</div>
</section>
</section>
<section id="practical-implementation" class="level2">
<h2 class="anchored" data-anchor-id="practical-implementation">Practical Implementation</h2>
<p>Here’s a complete example of PAC learning in practice:</p>
<p>#| code-fold: false class MemoryEfficientLearner: def <strong>init</strong>(self, max_memory=1000): self.max_memory = max_memory self.model = None</p>
<pre><code>def fit_with_memory_constraint(self, X, y):
    n_samples = len(X)
    batch_size = min(self.max_memory, n_samples)
    
    # Simulate streaming learning
    times = []
    memories = []
    accuracies = []
    
    for batch_end in range(batch_size, n_samples + batch_size, batch_size):
        batch_start = batch_end - batch_size
        X_batch = X[batch_start:batch_end]
        y_batch = y[batch_start:batch_end]
        
        start_time = time.time()
        if self.model is None:
            self.model = SVC(kernel='linear')
        self.model.fit(X_batch, y_batch)
        
        times.append(time.time() - start_time)
        memories.append(batch_size * X.shape[1] * 8)  # Approximate memory in bytes
        accuracies.append(self.model.score(X_batch, y_batch))
    
    return times, memories, accuracies</code></pre>
</section>
</section>
<section id="generate-synthetic-dataset-with-proper-parameters" class="level1">
<h1>Generate synthetic dataset with proper parameters</h1>
<p>X, y = make_classification( n_samples=2000, n_features=2, n_informative=2, # All features are informative n_redundant=0, # No redundant features n_repeated=0, # No repeated features n_classes=2, random_state=42 )</p>
</section>
<section id="scale-the-features-for-better-svm-performance" class="level1">
<h1>Scale the features for better SVM performance</h1>
<p>from sklearn.preprocessing import StandardScaler scaler = StandardScaler() X = scaler.fit_transform(X)</p>
</section>
<section id="create-and-train-the-memory-efficient-learner" class="level1">
<h1>Create and train the memory-efficient learner</h1>
<p>learner = MemoryEfficientLearner(max_memory=500) times, memories, accuracies = learner.fit_with_memory_constraint(X, y)</p>
</section>
<section id="create-subplots-with-proper-spacing" class="level1">
<h1>Create subplots with proper spacing</h1>
<p>fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))</p>
</section>
<section id="plot-1-space-time-tradeoff" class="level1">
<h1>Plot 1: Space-Time Tradeoff</h1>
<p>ax1.plot(memories, times, ‘go-’, linewidth=2, markersize=8) ax1.set_xlabel(‘Memory usage (bytes)’) ax1.set_ylabel(‘Training time (seconds)’) ax1.set_title(‘Space-Time Tradeoff’) ax1.grid(True, alpha=0.3)</p>
</section>
<section id="plot-2-memory-vs-accuracy" class="level1">
<h1>Plot 2: Memory vs Accuracy</h1>
<p>ax2.plot(memories, accuracies, ‘bo-’, linewidth=2, markersize=8) ax2.set_xlabel(‘Memory usage (bytes)’) ax2.set_ylabel(‘Accuracy’) ax2.set_title(‘Memory-Accuracy Tradeoff’) ax2.grid(True, alpha=0.3)</p>
</section>
<section id="improve-plot-aesthetics" class="level1">
<h1>Improve plot aesthetics</h1>
<p>plt.tight_layout() for ax in [ax1, ax2]: ax.spines[‘top’].set_visible(False) ax.spines[‘right’].set_visible(False)</p>
<p>plt.show()</p>


</section>

 ]]></description>
  <category>machine-learning</category>
  <category>theory</category>
  <category>mathematics</category>
  <category>statistics</category>
  <guid>https://ram-polisetti.github.io/BendTheCurve/posts/pac-learning-theory/</guid>
  <pubDate>Tue, 19 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://ram-polisetti.github.io/BendTheCurve/posts/pac-learning-theory/pac_learning.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Computational Learning Theory</title>
  <dc:creator>Ram Polisetti</dc:creator>
  <link>https://ram-polisetti.github.io/BendTheCurve/posts/computational-learning-theory/</link>
  <description><![CDATA[ 





<section id="computational-learning-theory" class="level1">
<h1>Computational Learning Theory</h1>
<section id="complexity-measures" class="level2">
<h2 class="anchored" data-anchor-id="complexity-measures">Complexity Measures</h2>
<section id="sample-complexity" class="level3">
<h3 class="anchored" data-anchor-id="sample-complexity">1. Sample Complexity</h3>
<p>PAC learning bound:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Am%20%5Cgeq%20%5Cfrac%7B1%7D%7B%5Cepsilon%7D%5Cleft(%5Cln%7C%5Cmathcal%7BH%7D%7C%20+%20%5Cln%5Cfrac%7B1%7D%7B%5Cdelta%7D%5Cright)%0A"></p>
<p>VC dimension bound:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Am%20=%20O%5Cleft(%5Cfrac%7Bd%7D%7B%5Cepsilon%5E2%7D%5Cln%5Cfrac%7B1%7D%7B%5Cepsilon%7D%20+%20%5Cfrac%7B1%7D%7B%5Cepsilon%5E2%7D%5Cln%5Cfrac%7B1%7D%7B%5Cdelta%7D%5Cright)%0A"></p>
</section>
<section id="time-complexity" class="level3">
<h3 class="anchored" data-anchor-id="time-complexity">2. Time Complexity</h3>
<p>Learning algorithm runtime:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AT(m,n,%5Cepsilon,%5Cdelta)%20=%20%5Ctext%7Bpoly%7D(m,n,%5Cfrac%7B1%7D%7B%5Cepsilon%7D,%5Cfrac%7B1%7D%7B%5Cdelta%7D)%0A"></p>
<p>Where: - <img src="https://latex.codecogs.com/png.latex?m"> is sample size - <img src="https://latex.codecogs.com/png.latex?n"> is input dimension - <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> is accuracy - <img src="https://latex.codecogs.com/png.latex?%5Cdelta"> is confidence</p>
</section>
<section id="space-complexity" class="level3">
<h3 class="anchored" data-anchor-id="space-complexity">3. Space Complexity</h3>
<p>Memory requirements:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AS(m,n)%20=%20O(mn)%0A"></p>
<p>Streaming bound:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AS%20=%20O(%5Clog%20m%20+%20%5Clog%20n)%0A"></p>
</section>
</section>
<section id="learnability-analysis" class="level2">
<h2 class="anchored" data-anchor-id="learnability-analysis">Learnability Analysis</h2>
<section id="efficient-learnability" class="level3">
<h3 class="anchored" data-anchor-id="efficient-learnability">1. Efficient Learnability</h3>
<p>Definition: - Polynomial sample complexity - Polynomial time complexity - Polynomial space complexity</p>
<p>Requirements:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Am%20&amp;=%20%5Ctext%7Bpoly%7D(n,%5Cfrac%7B1%7D%7B%5Cepsilon%7D,%5Cfrac%7B1%7D%7B%5Cdelta%7D)%20%5C%5C%0AT%20&amp;=%20%5Ctext%7Bpoly%7D(n,%5Cfrac%7B1%7D%7B%5Cepsilon%7D,%5Cfrac%7B1%7D%7B%5Cdelta%7D)%20%5C%5C%0AS%20&amp;=%20%5Ctext%7Bpoly%7D(n,%5Cfrac%7B1%7D%7B%5Cepsilon%7D,%5Cfrac%7B1%7D%7B%5Cdelta%7D)%0A%5Cend%7Baligned%7D%0A"></p>
</section>
<section id="hardness-results" class="level3">
<h3 class="anchored" data-anchor-id="hardness-results">2. Hardness Results</h3>
<p>Cryptographic assumptions:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP%20%5Cneq%20NP%20%5Cimplies%20%5Ctext%7BNot%20efficiently%20learnable%7D%0A"></p>
<p>Reduction techniques:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BProblem%20A%7D%20%5Cleq_p%20%5Ctext%7BProblem%20B%7D%0A"></p>
</section>
<section id="average-case-analysis" class="level3">
<h3 class="anchored" data-anchor-id="average-case-analysis">3. Average-Case Analysis</h3>
<p>Expected runtime:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%7BE%7D%5BT(X)%5D%20=%20%5Csum_%7Bx%7D%20T(x)P(x)%0A"></p>
<p>Smoothed analysis:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmax_%7B%5Ctext%7Binput%20%7D%20I%7D%20%5Cmathbb%7BE%7D_%7B%5Ctext%7Bnoise%20%7D%20%5Cxi%7D%5BT(I%20+%20%5Cxi)%5D%0A"></p>
</section>
</section>
<section id="learning-models" class="level2">
<h2 class="anchored" data-anchor-id="learning-models">Learning Models</h2>
<section id="query-learning" class="level3">
<h3 class="anchored" data-anchor-id="query-learning">1. Query Learning</h3>
<p>Membership queries:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BMQ%7D(x)%20=%20c(x)%0A"></p>
<p>Equivalence queries:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BEQ%7D(h)%20=%20%5Cbegin%7Bcases%7D%0A%5Ctext%7BYes%7D%20&amp;%20%5Ctext%7Bif%20%7D%20h%20%5Cequiv%20c%20%5C%5C%0Ax%20&amp;%20%5Ctext%7Bwhere%20%7D%20h(x)%20%5Cneq%20c(x)%0A%5Cend%7Bcases%7D%0A"></p>
</section>
<section id="online-learning" class="level3">
<h3 class="anchored" data-anchor-id="online-learning">2. Online Learning</h3>
<p>Mistake bound:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AM%20%5Cleq%20%5Ctext%7Bpoly%7D(n,%5Ctext%7Bsize%7D(c))%0A"></p>
<p>Halving algorithm:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7C%5Cmathcal%7BH%7D_t%7C%20%5Cleq%20%7C%5Cmathcal%7BH%7D_0%7C/2%5Et%0A"></p>
</section>
<section id="active-learning" class="level3">
<h3 class="anchored" data-anchor-id="active-learning">3. Active Learning</h3>
<p>Label complexity:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5CLambda(%5Cepsilon,%5Cdelta)%20=%20O(%5Ctheta%20d%5Clog(1/%5Cepsilon)%5Clog(1/%5Cdelta))%0A"></p>
<p>Where: - <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> is disagreement coefficient - <img src="https://latex.codecogs.com/png.latex?d"> is VC dimension</p>
</section>
</section>
<section id="algorithmic-efficiency" class="level2">
<h2 class="anchored" data-anchor-id="algorithmic-efficiency">Algorithmic Efficiency</h2>
<section id="boosting-analysis" class="level3">
<h3 class="anchored" data-anchor-id="boosting-analysis">1. Boosting Analysis</h3>
<p>AdaBoost iterations:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AT%20=%20O%5Cleft(%5Cfrac%7B%5Clog(1/%5Cepsilon)%7D%7B%5Cgamma%5E2%7D%5Cright)%0A"></p>
<p>Where: - <img src="https://latex.codecogs.com/png.latex?%5Cgamma"> is edge over random</p>
</section>
<section id="kernel-methods" class="level3">
<h3 class="anchored" data-anchor-id="kernel-methods">2. Kernel Methods</h3>
<p>Kernel evaluation:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AT%20=%20O(m%5E2n)%0A"></p>
<p>Nyström approximation:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5C%7CK%20-%20%5Ctilde%7BK%7D%5C%7C_2%20%5Cleq%20%5Cepsilon%0A"></p>
</section>
<section id="neural-networks" class="level3">
<h3 class="anchored" data-anchor-id="neural-networks">3. Neural Networks</h3>
<p>Backpropagation complexity:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AT%20=%20O(mnd)%0A"></p>
<p>Where: - <img src="https://latex.codecogs.com/png.latex?d"> is network depth</p>
</section>
</section>
<section id="computational-trade-offs" class="level2">
<h2 class="anchored" data-anchor-id="computational-trade-offs">Computational Trade-offs</h2>
<section id="time-space-trade-offs" class="level3">
<h3 class="anchored" data-anchor-id="time-space-trade-offs">1. Time-Space Trade-offs</h3>
<p>Memory-runtime relationship:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AT%20%5Ccdot%20S%20=%20%5COmega(n%5E2)%0A"></p>
<p>Streaming algorithms:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AS%20%5Ccdot%20%5Ctext%7Bpasses%7D%20=%20%5COmega(n)%0A"></p>
</section>
<section id="sample-computation-trade-offs" class="level3">
<h3 class="anchored" data-anchor-id="sample-computation-trade-offs">2. Sample-Computation Trade-offs</h3>
<p>Active learning:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Bqueries%7D%20%5Ccdot%20%5Ctext%7Bcomputation%7D%20=%20O(m%5Clog%20m)%0A"></p>
<p>Parallel speedup:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AT_p%20=%20%5Cfrac%7BT_1%7D%7Bp%7D%20+%20O(%5Clog%20p)%0A"></p>
</section>
<section id="accuracy-complexity-trade-offs" class="level3">
<h3 class="anchored" data-anchor-id="accuracy-complexity-trade-offs">3. Accuracy-Complexity Trade-offs</h3>
<p>Approximation guarantee:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(x)%20%5Cleq%20(1+%5Cepsilon)%5Ctext%7BOPT%7D%0A"></p>
<p>Runtime dependency:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AT%20=%20O(%5Ctext%7Bpoly%7D(n,1/%5Cepsilon))%0A"></p>
</section>
</section>
<section id="advanced-topics" class="level2">
<h2 class="anchored" data-anchor-id="advanced-topics">Advanced Topics</h2>
<section id="communication-complexity" class="level3">
<h3 class="anchored" data-anchor-id="communication-complexity">1. Communication Complexity</h3>
<p>Two-party protocol:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0ACC(f)%20=%20%5Cmin_P%20%5Cmax_%7Bx,y%7D%20%5Ctext%7Bbits%7D(P(x,y))%0A"></p>
<p>Lower bound:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0ACC(f)%20%5Cgeq%20%5Clog_2%20%5Ctext%7Brank%7D(M_f)%0A"></p>
</section>
<section id="circuit-complexity" class="level3">
<h3 class="anchored" data-anchor-id="circuit-complexity">2. Circuit Complexity</h3>
<p>Boolean circuit size:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Bsize%7D(f)%20=%20%5Cmin_%7BC:%20C%20%5Ctext%7B%20computes%20%7D%20f%7D%20%5Ctext%7Bgates%7D(C)%0A"></p>
<p>Depth bound:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Bdepth%7D(f)%20%5Cgeq%20%5Clog_2%20%5Ctext%7Bsensitivity%7D(f)%0A"></p>
</section>
<section id="information-complexity" class="level3">
<h3 class="anchored" data-anchor-id="information-complexity">3. Information Complexity</h3>
<p>Information cost:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AIC(P)%20=%20I(X;M%7CY)%20+%20I(Y;M%7CX)%0A"></p>
<p>Protocol compression:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7CP'%7C%20%5Cleq%20O(IC(P)%5Clog%7CP%7C)%0A"></p>
</section>
</section>
<section id="practical-implications" class="level2">
<h2 class="anchored" data-anchor-id="practical-implications">Practical Implications</h2>
<section id="algorithm-design" class="level3">
<h3 class="anchored" data-anchor-id="algorithm-design">1. Algorithm Design</h3>
<ol type="1">
<li>Resource Constraints:
<ul>
<li>Time efficiency</li>
<li>Memory usage</li>
<li>Communication cost</li>
</ul></li>
<li>Scalability:
<ul>
<li>Input size</li>
<li>Dimensionality</li>
<li>Sample complexity</li>
</ul></li>
<li>Parallelization:
<ul>
<li>Task decomposition</li>
<li>Communication overhead</li>
<li>Load balancing</li>
</ul></li>
</ol>
</section>
<section id="system-implementation" class="level3">
<h3 class="anchored" data-anchor-id="system-implementation">2. System Implementation</h3>
<ol type="1">
<li>Architecture:
<ul>
<li>Processing units</li>
<li>Memory hierarchy</li>
<li>Network topology</li>
</ul></li>
<li>Optimization:
<ul>
<li>Caching strategies</li>
<li>Data structures</li>
<li>Algorithm selection</li>
</ul></li>
<li>Trade-offs:
<ul>
<li>Accuracy vs speed</li>
<li>Memory vs computation</li>
<li>Communication vs local processing</li>
</ul></li>
</ol>
</section>
</section>
<section id="theoretical-frameworks" class="level2">
<h2 class="anchored" data-anchor-id="theoretical-frameworks">Theoretical Frameworks</h2>
<section id="learning-with-errors" class="level3">
<h3 class="anchored" data-anchor-id="learning-with-errors">1. Learning with Errors</h3>
<p>LWE assumption:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A(A,As+e)%20%5Capprox_c%20(A,u)%0A"></p>
<p>Where: - <img src="https://latex.codecogs.com/png.latex?A"> is random matrix - <img src="https://latex.codecogs.com/png.latex?s"> is secret - <img src="https://latex.codecogs.com/png.latex?e"> is error - <img src="https://latex.codecogs.com/png.latex?u"> is uniform</p>
</section>
<section id="statistical-query-model" class="level3">
<h3 class="anchored" data-anchor-id="statistical-query-model">2. Statistical Query Model</h3>
<p>Query complexity:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BSQ-DIM%7D(%5Cmathcal%7BC%7D)%20=%20%5Cmin_%7BD%7D%20%5Cmax_%7Bf%20%5Cin%20%5Cmathcal%7BC%7D%7D%20%7C%5Clangle%20f,D%20%5Crangle%7C%0A"></p>
</section>
<section id="property-testing" class="level3">
<h3 class="anchored" data-anchor-id="property-testing">3. Property Testing</h3>
<p>Query complexity:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AQ(%5Cepsilon)%20=%20O(%5Cfrac%7B1%7D%7B%5Cepsilon%7D%5Clog%5Cfrac%7B1%7D%7B%5Cepsilon%7D)%0A"></p>
<p>Distance measure:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Bdist%7D(f,g)%20=%20%5Ctext%7BPr%7D_%7Bx%7D%5Bf(x)%20%5Cneq%20g(x)%5D%0A"></p>
</section>
</section>
<section id="best-practices" class="level2">
<h2 class="anchored" data-anchor-id="best-practices">Best Practices</h2>
<section id="algorithm-analysis" class="level3">
<h3 class="anchored" data-anchor-id="algorithm-analysis">1. Algorithm Analysis</h3>
<ol type="1">
<li>Complexity Measures:
<ul>
<li>Asymptotic bounds</li>
<li>Average case</li>
<li>Worst case</li>
</ul></li>
<li>Resource Usage:
<ul>
<li>Memory footprint</li>
<li>CPU utilization</li>
<li>I/O operations</li>
</ul></li>
<li>Scalability:
<ul>
<li>Data size</li>
<li>Dimensionality</li>
<li>Parallelization</li>
</ul></li>
</ol>
</section>
<section id="implementation" class="level3">
<h3 class="anchored" data-anchor-id="implementation">2. Implementation</h3>
<ol type="1">
<li>Optimization:
<ul>
<li>Algorithm choice</li>
<li>Data structures</li>
<li>Memory management</li>
</ul></li>
<li>Trade-offs:
<ul>
<li>Time vs space</li>
<li>Accuracy vs speed</li>
<li>Communication vs computation</li>
</ul></li>
<li>Evaluation:
<ul>
<li>Benchmarking</li>
<li>Profiling</li>
<li>Performance analysis</li>
</ul></li>
</ol>
</section>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ol type="1">
<li>Theory:
<ul>
<li>“Foundations of Machine Learning” by Mohri et al.</li>
<li>“Understanding Machine Learning” by Shalev-Shwartz and Ben-David</li>
<li>“Computational Learning Theory” by Kearns and Vazirani</li>
</ul></li>
<li>Complexity:
<ul>
<li>“Computational Complexity” by Arora and Barak</li>
<li>“Communication Complexity” by Kushilevitz and Nisan</li>
<li>“The Nature of Computation” by Moore and Mertens</li>
</ul></li>
<li>Applications:
<ul>
<li>“Algorithmic Learning Theory” by Anthony and Biggs</li>
<li>“Learning with Kernels” by Schölkopf and Smola</li>
<li>“Theoretical Computer Science” by Hopcroft and Ullman</li>
</ul></li>
</ol>


</section>
</section>

 ]]></description>
  <category>machine-learning</category>
  <category>theory</category>
  <category>complexity</category>
  <category>algorithms</category>
  <guid>https://ram-polisetti.github.io/BendTheCurve/posts/computational-learning-theory/</guid>
  <pubDate>Tue, 19 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://ram-polisetti.github.io/BendTheCurve/posts/computational-learning-theory/computational_theory.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Algorithmic Stability and Learning Theory</title>
  <dc:creator>Ram Polisetti</dc:creator>
  <link>https://ram-polisetti.github.io/BendTheCurve/posts/algorithmic-stability/</link>
  <description><![CDATA[ 





<section id="algorithmic-stability-and-learning-theory" class="level1">
<h1>Algorithmic Stability and Learning Theory</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learning Objectives
</div>
</div>
<div class="callout-body-container callout-body">
<p>By the end of this article, you will: 1. Understand what algorithmic stability means and why it matters 2. Learn different types of stability measures 3. See how stability affects model generalization 4. Practice implementing stability checks 5. Learn best practices for developing stable models</p>
</div>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Imagine building a house of cards . If a slight breeze can topple it, we’d say it’s unstable. Similarly, in machine learning, we want our models to be stable - small changes in the training data shouldn’t cause dramatic changes in predictions.</p>
<div id="b26f635f" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Ridge</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StandardScaler</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set random seed for reproducibility</span></span>
<span id="cb1-8">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="understanding-stability-through-examples" class="level2">
<h2 class="anchored" data-anchor-id="understanding-stability-through-examples">1. Understanding Stability Through Examples</h2>
<p>Let’s visualize what stability means with a simple example:</p>
<div id="56e3895d" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate_data(n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb2-2">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, n_samples).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-3">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X.ravel() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.sin(X.ravel()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, n_samples)</span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> X, y</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_stability_comparison(alpha1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, alpha2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>):</span>
<span id="cb2-7">    X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_data()</span>
<span id="cb2-8">    </span>
<span id="cb2-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create two models with different regularization</span></span>
<span id="cb2-10">    model1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Ridge(alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alpha1)</span>
<span id="cb2-11">    model2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Ridge(alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alpha2)</span>
<span id="cb2-12">    </span>
<span id="cb2-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fit models</span></span>
<span id="cb2-14">    model1.fit(X, y)</span>
<span id="cb2-15">    model2.fit(X, y)</span>
<span id="cb2-16">    </span>
<span id="cb2-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate predictions</span></span>
<span id="cb2-18">    X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-19">    y_pred1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model1.predict(X_test)</span>
<span id="cb2-20">    y_pred2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model2.predict(X_test)</span>
<span id="cb2-21">    </span>
<span id="cb2-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot results</span></span>
<span id="cb2-23">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb2-24">    plt.scatter(X, y, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Data points'</span>)</span>
<span id="cb2-25">    plt.plot(X_test, y_pred1, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r-'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Less stable (α=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>alpha1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb2-26">    plt.plot(X_test, y_pred2, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'g-'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'More stable (α=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>alpha2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb2-27">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Stability Comparison: Effect of Regularization'</span>)</span>
<span id="cb2-28">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)</span>
<span id="cb2-29">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="cb2-30">    plt.legend()</span>
<span id="cb2-31">    plt.show()</span>
<span id="cb2-32"></span>
<span id="cb2-33">plot_stability_comparison()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://ram-polisetti.github.io/BendTheCurve/posts/algorithmic-stability/index_files/figure-html/cell-3-output-1.png" width="948" height="523" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Key Insight
</div>
</div>
<div class="callout-body-container callout-body">
<p>Notice how the more stable model (green line) is less sensitive to individual data points, while the less stable model (red line) overfits to the noise in the data.</p>
</div>
</div>
</section>
<section id="fundamental-concepts" class="level2">
<h2 class="anchored" data-anchor-id="fundamental-concepts">Fundamental Concepts</h2>
<section id="stability-definitions" class="level3">
<h3 class="anchored" data-anchor-id="stability-definitions">1. Stability Definitions</h3>
<p>Hypothesis stability:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7C%5Cell(A_S,z)%20-%20%5Cell(A_%7BS%5Ei%7D,z)%7C%20%5Cleq%20%5Cbeta_m%0A"></p>
<p>Where: - <img src="https://latex.codecogs.com/png.latex?A_S"> is algorithm output on dataset <img src="https://latex.codecogs.com/png.latex?S"> - <img src="https://latex.codecogs.com/png.latex?S%5Ei"> is dataset with i-th example replaced - <img src="https://latex.codecogs.com/png.latex?%5Cbeta_m"> is stability coefficient</p>
<p>Uniform stability:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csup_%7BS,z,i%7D%7C%5Cell(A_S,z)%20-%20%5Cell(A_%7BS%5Ei%7D,z)%7C%20%5Cleq%20%5Cbeta%0A"></p>
</section>
<section id="loss-stability" class="level3">
<h3 class="anchored" data-anchor-id="loss-stability">2. Loss Stability</h3>
<p>Point-wise loss stability:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7C%5Cell(h_S,z)%20-%20%5Cell(h_%7BS%5Ei%7D,z)%7C%20%5Cleq%20%5Cbeta%0A"></p>
<p>Average loss stability:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7C%5Cmathbb%7BE%7D_%7Bz%20%5Csim%20%5Cmathcal%7BD%7D%7D%5B%5Cell(h_S,z)%20-%20%5Cell(h_%7BS%5Ei%7D,z)%5D%7C%20%5Cleq%20%5Cbeta%0A"></p>
</section>
<section id="generalization-bounds" class="level3">
<h3 class="anchored" data-anchor-id="generalization-bounds">3. Generalization Bounds</h3>
<p>McDiarmid’s inequality based bound:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP(%7CR(A_S)%20-%20%5Chat%7BR%7D_S(A_S)%7C%20%3E%20%5Cepsilon)%20%5Cleq%202%5Cexp(-%5Cfrac%7B2m%5Cepsilon%5E2%7D%7B(4%5Cbeta)%5E2%7D)%0A"></p>
<p>Expected generalization error:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7C%5Cmathbb%7BE%7D%5BR(A_S)%20-%20%5Chat%7BR%7D_S(A_S)%5D%7C%20%5Cleq%20%5Cbeta%0A"></p>
</section>
</section>
<section id="types-of-stability" class="level2">
<h2 class="anchored" data-anchor-id="types-of-stability">Types of Stability</h2>
<section id="strong-stability" class="level3">
<h3 class="anchored" data-anchor-id="strong-stability">1. Strong Stability</h3>
<p>Definition:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csup_%7BS,S':%20%7CS%20%5Ctriangle%20S'%7C%20=%202%7D%5C%7CA_S%20-%20A_%7BS'%7D%5C%7C%20%5Cleq%20%5Cbeta_m%0A"></p>
<p>Generalization bound:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP(%7CR(A_S)%20-%20%5Chat%7BR%7D_S(A_S)%7C%20%3E%20%5Cepsilon)%20%5Cleq%202%5Cexp(-%5Cfrac%7Bm%5Cepsilon%5E2%7D%7B2%5Cbeta_m%5E2%7D)%0A"></p>
</section>
<section id="cross-validation-stability" class="level3">
<h3 class="anchored" data-anchor-id="cross-validation-stability">2. Cross-Validation Stability</h3>
<p>Leave-one-out stability:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7C%5Cmathbb%7BE%7D_%7BS,z%7D%5B%5Cell(A_S,z)%20-%20%5Cell(A_%7BS%5E%7B-i%7D%7D,z)%5D%7C%20%5Cleq%20%5Cbeta_m%0A"></p>
<p>k-fold stability:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7C%5Cmathbb%7BE%7D_%7BS,z%7D%5B%5Cell(A_S,z)%20-%20%5Cell(A_%7BS_k%7D,z)%5D%7C%20%5Cleq%20%5Cbeta_m%0A"></p>
</section>
<section id="algorithmic-robustness" class="level3">
<h3 class="anchored" data-anchor-id="algorithmic-robustness">3. Algorithmic Robustness</h3>
<p><img src="https://latex.codecogs.com/png.latex?(K,%5Cepsilon(%5Ccdot))">-robustness:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP_%7BS,z%7D(%7C%5Cell(A_S,z)%20-%20%5Cell(A_S,z')%7C%20%3E%20%5Cepsilon(m))%20%5Cleq%20K/m%0A"></p>
<p>Where: - <img src="https://latex.codecogs.com/png.latex?z,z'"> are in same partition - <img src="https://latex.codecogs.com/png.latex?K"> is number of partitions - <img src="https://latex.codecogs.com/png.latex?%5Cepsilon(m)"> is robustness parameter</p>
</section>
</section>
<section id="stability-analysis" class="level2">
<h2 class="anchored" data-anchor-id="stability-analysis">Stability Analysis</h2>
<section id="regularization-and-stability" class="level3">
<h3 class="anchored" data-anchor-id="regularization-and-stability">1. Regularization and Stability</h3>
<p>Tikhonov regularization:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AA_S%20=%20%5Carg%5Cmin_%7Bh%20%5Cin%20%5Cmathcal%7BH%7D%7D%20%5Cfrac%7B1%7D%7Bm%7D%5Csum_%7Bi=1%7D%5Em%20%5Cell(h,z_i)%20+%20%5Clambda%5C%7Ch%5C%7C%5E2%0A"></p>
<p>Stability bound:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbeta%20%5Cleq%20%5Cfrac%7BL%5E2%7D%7B2m%5Clambda%7D%0A"></p>
<p>Where: - <img src="https://latex.codecogs.com/png.latex?L"> is Lipschitz constant - <img src="https://latex.codecogs.com/png.latex?%5Clambda"> is regularization parameter</p>
</section>
<section id="gradient-methods" class="level3">
<h3 class="anchored" data-anchor-id="gradient-methods">2. Gradient Methods</h3>
<p>Gradient descent stability:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5C%7Cw_t%20-%20w_t'%5C%7C%20%5Cleq%20(1+%5Ceta%20L)%5Et%5C%7Cw_0%20-%20w_0'%5C%7C%0A"></p>
<p>SGD stability:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%7BE%7D%5B%5C%7Cw_t%20-%20w_t'%5C%7C%5E2%5D%20%5Cleq%20%5Cfrac%7B%5Ceta%5E2L%5E2%7D%7B2m%7D%0A"></p>
</section>
<section id="ensemble-methods" class="level3">
<h3 class="anchored" data-anchor-id="ensemble-methods">3. Ensemble Methods</h3>
<p>Bagging stability:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbeta_%7B%5Ctext%7Bbag%7D%7D%20%5Cleq%20%5Cfrac%7B%5Cbeta%7D%7B%5Csqrt%7BB%7D%7D%0A"></p>
<p>Where: - <img src="https://latex.codecogs.com/png.latex?B"> is number of bootstrap samples - <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> is base learner stability</p>
</section>
</section>
<section id="practical-stability-analysis" class="level2">
<h2 class="anchored" data-anchor-id="practical-stability-analysis">Practical Stability Analysis</h2>
<p>Let’s implement some stability measures and visualize them:</p>
<div id="0c07dfc3" class="cell" data-execution_count="3">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> StabilityAnalyzer:</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, model_class, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>model_params):</span>
<span id="cb3-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model_class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_class</span>
<span id="cb3-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_params</span>
<span id="cb3-5">        </span>
<span id="cb3-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> measure_hypothesis_stability(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, X, y, n_perturbations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb3-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Measure hypothesis stability by perturbing data points"""</span></span>
<span id="cb3-8">        m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(X)</span>
<span id="cb3-9">        stabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-10">        </span>
<span id="cb3-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Original model</span></span>
<span id="cb3-12">        base_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model_class(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model_params)</span>
<span id="cb3-13">        base_model.fit(X, y)</span>
<span id="cb3-14">        base_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base_model.predict(X)</span>
<span id="cb3-15">        </span>
<span id="cb3-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_perturbations):</span>
<span id="cb3-17">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Randomly replace one point</span></span>
<span id="cb3-18">            idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(m)</span>
<span id="cb3-19">            X_perturbed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.copy()</span>
<span id="cb3-20">            y_perturbed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y.copy()</span>
<span id="cb3-21">            </span>
<span id="cb3-22">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add small noise to selected point</span></span>
<span id="cb3-23">            X_perturbed[idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb3-24">            </span>
<span id="cb3-25">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train perturbed model</span></span>
<span id="cb3-26">            perturbed_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model_class(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model_params)</span>
<span id="cb3-27">            perturbed_model.fit(X_perturbed, y_perturbed)</span>
<span id="cb3-28">            perturbed_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> perturbed_model.predict(X)</span>
<span id="cb3-29">            </span>
<span id="cb3-30">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate stability measure</span></span>
<span id="cb3-31">            stability <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(base_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> perturbed_preds))</span>
<span id="cb3-32">            stabilities.append(stability)</span>
<span id="cb3-33">            </span>
<span id="cb3-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.mean(stabilities), np.std(stabilities)</span>
<span id="cb3-35"></span>
<span id="cb3-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage with Ridge Regression</span></span>
<span id="cb3-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> compare_model_stability():</span>
<span id="cb3-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate synthetic data</span></span>
<span id="cb3-39">    np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb3-40">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-41">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb3-42">    </span>
<span id="cb3-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compare stability with different regularization strengths</span></span>
<span id="cb3-44">    alphas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>]</span>
<span id="cb3-45">    stabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-46">    errors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-47">    </span>
<span id="cb3-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> alpha <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> alphas:</span>
<span id="cb3-49">        analyzer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StabilityAnalyzer(Ridge, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alpha)</span>
<span id="cb3-50">        stability, error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> analyzer.measure_hypothesis_stability(X, y)</span>
<span id="cb3-51">        stabilities.append(stability)</span>
<span id="cb3-52">        errors.append(error)</span>
<span id="cb3-53">    </span>
<span id="cb3-54">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot results</span></span>
<span id="cb3-55">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb3-56">    plt.errorbar(alphas, stabilities, yerr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>errors, fmt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o-'</span>, capsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb3-57">    plt.xscale(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>)</span>
<span id="cb3-58">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Regularization Strength (α)'</span>)</span>
<span id="cb3-59">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Stability Measure'</span>)</span>
<span id="cb3-60">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model Stability vs Regularization'</span>)</span>
<span id="cb3-61">    plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb3-62">    plt.show()</span>
<span id="cb3-63"></span>
<span id="cb3-64">compare_model_stability()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://ram-polisetti.github.io/BendTheCurve/posts/algorithmic-stability/index_files/figure-html/cell-4-output-1.png" width="838" height="525" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Interpreting Stability Results
</div>
</div>
<div class="callout-body-container callout-body">
<p>Lower values indicate more stable models. Notice how increasing regularization generally improves stability.</p>
</div>
</div>
</section>
<section id="cross-validation-stability-1" class="level2">
<h2 class="anchored" data-anchor-id="cross-validation-stability-1">Cross-Validation Stability</h2>
<p>Let’s visualize how different cross-validation strategies affect stability:</p>
<div id="75784afe" class="cell" data-execution_count="4">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> analyze_cv_stability(n_splits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>], n_repeats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Analyze stability across different CV splits"""</span></span>
<span id="cb4-3">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> KFold</span>
<span id="cb4-4">    </span>
<span id="cb4-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate data</span></span>
<span id="cb4-6">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-7">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb4-8">    </span>
<span id="cb4-9">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k: [] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> n_splits}</span>
<span id="cb4-10">    </span>
<span id="cb4-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> n_splits:</span>
<span id="cb4-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_repeats):</span>
<span id="cb4-13">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create k-fold split</span></span>
<span id="cb4-14">            kf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KFold(n_splits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>k, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-15">            fold_scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-16">            </span>
<span id="cb4-17">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> train_idx, val_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> kf.split(X):</span>
<span id="cb4-18">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train model</span></span>
<span id="cb4-19">                model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Ridge(alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)</span>
<span id="cb4-20">                model.fit(X[train_idx], y[train_idx])</span>
<span id="cb4-21">                </span>
<span id="cb4-22">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get score</span></span>
<span id="cb4-23">                score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.score(X[val_idx], y[val_idx])</span>
<span id="cb4-24">                fold_scores.append(score)</span>
<span id="cb4-25">            </span>
<span id="cb4-26">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate stability of scores</span></span>
<span id="cb4-27">            results[k].append(np.std(fold_scores))</span>
<span id="cb4-28">    </span>
<span id="cb4-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot results</span></span>
<span id="cb4-30">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb4-31">    plt.boxplot([results[k] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> n_splits], labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-fold'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> n_splits])</span>
<span id="cb4-32">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Score Stability (std)'</span>)</span>
<span id="cb4-33">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cross-Validation Strategy'</span>)</span>
<span id="cb4-34">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cross-Validation Stability Analysis'</span>)</span>
<span id="cb4-35">    plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb4-36">    plt.show()</span>
<span id="cb4-37"></span>
<span id="cb4-38">analyze_cv_stability()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://ram-polisetti.github.io/BendTheCurve/posts/algorithmic-stability/index_files/figure-html/cell-5-output-1.png" width="838" height="523" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Cross-Validation Insight
</div>
</div>
<div class="callout-body-container callout-body">
<p>More folds generally lead to more stable results but require more computational resources.</p>
</div>
</div>
</section>
<section id="ensemble-stability" class="level2">
<h2 class="anchored" data-anchor-id="ensemble-stability">Ensemble Stability</h2>
<p>Let’s implement and visualize the stability of ensemble methods:</p>
<div id="e5ef74e6" class="cell" data-execution_count="5">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> analyze_ensemble_stability(n_estimators<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>]):</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Analyze how ensemble size affects stability"""</span></span>
<span id="cb5-3">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BaggingRegressor</span>
<span id="cb5-4">    </span>
<span id="cb5-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate data</span></span>
<span id="cb5-6">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-7">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>)</span>
<span id="cb5-8">    </span>
<span id="cb5-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test data for stability measurement</span></span>
<span id="cb5-10">    X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-11">    </span>
<span id="cb5-12">    stabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-13">    errors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-14">    </span>
<span id="cb5-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> n_estimators:</span>
<span id="cb5-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create multiple ensembles with same size</span></span>
<span id="cb5-17">        predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb5-19">            model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BaggingRegressor(</span>
<span id="cb5-20">                estimator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Ridge(alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>),</span>
<span id="cb5-21">                n_estimators<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n,</span>
<span id="cb5-22">                random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb5-23">            )</span>
<span id="cb5-24">            model.fit(X, y)</span>
<span id="cb5-25">            predictions.append(model.predict(X_test))</span>
<span id="cb5-26">        </span>
<span id="cb5-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate stability across different ensemble instances</span></span>
<span id="cb5-28">        stability <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean([np.std(pred) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pred <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>predictions)])</span>
<span id="cb5-29">        error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.std([np.std(pred) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pred <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>predictions)])</span>
<span id="cb5-30">        </span>
<span id="cb5-31">        stabilities.append(stability)</span>
<span id="cb5-32">        errors.append(error)</span>
<span id="cb5-33">    </span>
<span id="cb5-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot results</span></span>
<span id="cb5-35">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb5-36">    plt.errorbar(n_estimators, stabilities, yerr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>errors, fmt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o-'</span>, capsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb5-37">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Number of Estimators'</span>)</span>
<span id="cb5-38">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Prediction Stability'</span>)</span>
<span id="cb5-39">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ensemble Size vs. Prediction Stability'</span>)</span>
<span id="cb5-40">    plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb5-41">    plt.show()</span>
<span id="cb5-42"></span>
<span id="cb5-43">analyze_ensemble_stability()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://ram-polisetti.github.io/BendTheCurve/posts/algorithmic-stability/index_files/figure-html/cell-6-output-1.png" width="838" height="523" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Ensemble Benefits
</div>
</div>
<div class="callout-body-container callout-body">
<p>Larger ensembles tend to have more stable predictions, demonstrating the “wisdom of crowds” effect.</p>
</div>
</div>
</section>
<section id="applications" class="level2">
<h2 class="anchored" data-anchor-id="applications">Applications</h2>
<section id="regularized-learning" class="level3">
<h3 class="anchored" data-anchor-id="regularized-learning">1. Regularized Learning</h3>
<p>Ridge regression stability:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbeta_%7B%5Ctext%7Bridge%7D%7D%20%5Cleq%20%5Cfrac%7B4M%5E2%7D%7Bm%5Clambda%7D%0A"></p>
<p>Where: - <img src="https://latex.codecogs.com/png.latex?M"> is bound on features - <img src="https://latex.codecogs.com/png.latex?%5Clambda"> is regularization</p>
</section>
<section id="online-learning" class="level3">
<h3 class="anchored" data-anchor-id="online-learning">2. Online Learning</h3>
<p>Online stability:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%7BE%7D%5B%5C%7Cw_t%20-%20w_t'%5C%7C%5D%20%5Cleq%20%5Cfrac%7B2G%7D%7B%5Clambda%5Csqrt%7Bt%7D%7D%0A"></p>
<p>Where: - <img src="https://latex.codecogs.com/png.latex?G"> is gradient bound - <img src="https://latex.codecogs.com/png.latex?t"> is iteration number</p>
</section>
<section id="deep-learning" class="level3">
<h3 class="anchored" data-anchor-id="deep-learning">3. Deep Learning</h3>
<p>Dropout stability:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbeta_%7B%5Ctext%7Bdropout%7D%7D%20%5Cleq%20%5Cfrac%7Bp(1-p)L%5E2%7D%7Bm%7D%0A"></p>
<p>Where: - <img src="https://latex.codecogs.com/png.latex?p"> is dropout probability - <img src="https://latex.codecogs.com/png.latex?L"> is network Lipschitz constant</p>
</section>
</section>
<section id="advanced-topics" class="level2">
<h2 class="anchored" data-anchor-id="advanced-topics">Advanced Topics</h2>
<section id="local-stability" class="level3">
<h3 class="anchored" data-anchor-id="local-stability">1. Local Stability</h3>
<p>Definition:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7C%5Cell(A_S,z)%20-%20%5Cell(A_%7BS%5Ei%7D,z)%7C%20%5Cleq%20%5Cbeta(z)%0A"></p>
<p>Adaptive bound:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP(%7CR(A_S)%20-%20%5Chat%7BR%7D_S(A_S)%7C%20%3E%20%5Cepsilon)%20%5Cleq%202%5Cexp(-%5Cfrac%7B2m%5Cepsilon%5E2%7D%7B%5Cmathbb%7BE%7D%5B%5Cbeta(Z)%5E2%5D%7D)%0A"></p>
</section>
<section id="distribution-stability" class="level3">
<h3 class="anchored" data-anchor-id="distribution-stability">2. Distribution Stability</h3>
<p>Definition:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5C%7C%5Cmathcal%7BD%7D_%7BA_S%7D%20-%20%5Cmathcal%7BD%7D_%7BA_%7BS%5Ei%7D%7D%5C%7C_1%20%5Cleq%20%5Cbeta%0A"></p>
<p>Generalization:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7C%5Cmathbb%7BE%7D%5BR(A_S)%5D%20-%20%5Cmathbb%7BE%7D%5B%5Chat%7BR%7D_S(A_S)%5D%7C%20%5Cleq%20%5Cbeta%0A"></p>
</section>
<section id="algorithmic-privacy" class="level3">
<h3 class="anchored" data-anchor-id="algorithmic-privacy">3. Algorithmic Privacy</h3>
<p>Differential privacy:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP(A_S%20%5Cin%20E)%20%5Cleq%20e%5E%5Cepsilon%20P(A_%7BS'%7D%20%5Cin%20E)%0A"></p>
<p>Privacy-stability relationship:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbeta%20%5Cleq%20%5Cepsilon%20L%0A"></p>
</section>
</section>
<section id="theoretical-results" class="level2">
<h2 class="anchored" data-anchor-id="theoretical-results">Theoretical Results</h2>
<section id="stability-hierarchy" class="level3">
<h3 class="anchored" data-anchor-id="stability-hierarchy">1. Stability Hierarchy</h3>
<p>Relationships:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BUniform%7D%20%5Cimplies%20%5Ctext%7BHypothesis%7D%20%5Cimplies%20%5Ctext%7BPoint-wise%7D%20%5Cimplies%20%5Ctext%7BAverage%7D%0A"></p>
<p>Equivalence conditions:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbeta_%7B%5Ctext%7Buniform%7D%7D%20=%20%5Cbeta_%7B%5Ctext%7Bhypothesis%7D%7D%20%5Ciff%20%5Ctext%7Bconvex%20loss%7D%0A"></p>
</section>
<section id="lower-bounds" class="level3">
<h3 class="anchored" data-anchor-id="lower-bounds">2. Lower Bounds</h3>
<p>Minimal stability:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbeta_m%20%5Cgeq%20%5COmega(%5Cfrac%7B1%7D%7B%5Csqrt%7Bm%7D%7D)%0A"></p>
<p>Optimal rates:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbeta_m%20=%20%5CTheta(%5Cfrac%7B1%7D%7Bm%7D)%0A"></p>
</section>
<section id="composition-theorems" class="level3">
<h3 class="anchored" data-anchor-id="composition-theorems">3. Composition Theorems</h3>
<p>Serial composition:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbeta_%7BA%20%5Ccirc%20B%7D%20%5Cleq%20%5Cbeta_A%20+%20%5Cbeta_B%0A"></p>
<p>Parallel composition:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbeta_%7B%5Ctext%7Bparallel%7D%7D%20%5Cleq%20%5Cmax_i%20%5Cbeta_i%0A"></p>
</section>
</section>
<section id="implementation-considerations" class="level2">
<h2 class="anchored" data-anchor-id="implementation-considerations">Implementation Considerations</h2>
<section id="algorithm-design" class="level3">
<h3 class="anchored" data-anchor-id="algorithm-design">1. Algorithm Design</h3>
<ol type="1">
<li>Regularization:
<ul>
<li>Choose appropriate <img src="https://latex.codecogs.com/png.latex?%5Clambda"></li>
<li>Balance stability-accuracy</li>
<li>Adaptive regularization</li>
</ul></li>
<li>Optimization:
<ul>
<li>Step size selection</li>
<li>Batch size impact</li>
<li>Momentum effects</li>
</ul></li>
<li>Architecture:
<ul>
<li>Layer stability</li>
<li>Skip connections</li>
<li>Normalization impact</li>
</ul></li>
</ol>
</section>
<section id="stability-measures" class="level3">
<h3 class="anchored" data-anchor-id="stability-measures">2. Stability Measures</h3>
<ol type="1">
<li>Empirical Stability:
<ul>
<li>Leave-one-out estimates</li>
<li>Bootstrap estimates</li>
<li>Cross-validation</li>
</ul></li>
<li>Theoretical Bounds:
<ul>
<li>Lipschitz constants</li>
<li>Condition numbers</li>
<li>Spectral norms</li>
</ul></li>
<li>Monitoring:
<ul>
<li>Stability metrics</li>
<li>Generalization gaps</li>
<li>Validation curves</li>
</ul></li>
</ol>
</section>
</section>
<section id="best-practices" class="level2">
<h2 class="anchored" data-anchor-id="best-practices">Best Practices</h2>
<section id="model-selection" class="level3">
<h3 class="anchored" data-anchor-id="model-selection">1. Model Selection</h3>
<ol type="1">
<li>Stability Analysis:
<ul>
<li>Cross-validation stability</li>
<li>Parameter sensitivity</li>
<li>Model robustness</li>
</ul></li>
<li>Regularization:
<ul>
<li>Multiple techniques</li>
<li>Adaptive schemes</li>
<li>Stability-based selection</li>
</ul></li>
<li>Validation:
<ul>
<li>Stability metrics</li>
<li>Generalization bounds</li>
<li>Robustness checks</li>
</ul></li>
</ol>
</section>
<section id="training-strategy" class="level3">
<h3 class="anchored" data-anchor-id="training-strategy">2. Training Strategy</h3>
<ol type="1">
<li>Optimization:
<ul>
<li>Stable algorithms</li>
<li>Adaptive methods</li>
<li>Early stopping</li>
</ul></li>
<li>Data Processing:
<ul>
<li>Robust preprocessing</li>
<li>Feature stability</li>
<li>Outlier handling</li>
</ul></li>
<li>Evaluation:
<ul>
<li>Stability measures</li>
<li>Confidence bounds</li>
<li>Sensitivity analysis</li>
</ul></li>
</ol>
</section>
</section>
<section id="interactive-stability-analysis" class="level2">
<h2 class="anchored" data-anchor-id="interactive-stability-analysis">Interactive Stability Analysis</h2>
<p>Let’s create an interactive tool to measure stability:</p>
<div id="e26ae1eb" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> measure_stability(model, X, y, n_perturbations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb6-2">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_perturbations):</span>
<span id="cb6-4">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add small random noise to data</span></span>
<span id="cb6-5">        X_perturbed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, X.shape)</span>
<span id="cb6-6">        model.fit(X_perturbed, y)</span>
<span id="cb6-7">        predictions.append(model.predict(X))</span>
<span id="cb6-8">    </span>
<span id="cb6-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate stability score (lower is more stable)</span></span>
<span id="cb6-10">    stability_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.std(predictions, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).mean()</span>
<span id="cb6-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> stability_score</span>
<span id="cb6-12"></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compare stability of different models</span></span>
<span id="cb6-14">X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_data()</span>
<span id="cb6-15">models <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb6-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ridge (α=0.1)'</span>: Ridge(alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>),</span>
<span id="cb6-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ridge (α=1.0)'</span>: Ridge(alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>),</span>
<span id="cb6-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ridge (α=10.0)'</span>: Ridge(alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>)</span>
<span id="cb6-19">}</span>
<span id="cb6-20"></span>
<span id="cb6-21"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> name, model <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> models.items():</span>
<span id="cb6-22">    score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> measure_stability(model, X, y)</span>
<span id="cb6-23">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> stability score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>score<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Ridge (α=0.1) stability score: 0.0078
Ridge (α=1.0) stability score: 0.0060
Ridge (α=10.0) stability score: 0.0065</code></pre>
</div>
</div>
</section>
<section id="code-implementation" class="level2">
<h2 class="anchored" data-anchor-id="code-implementation">Code Implementation</h2>
<p>Here’s a practical implementation of stability monitoring:</p>
<div id="917c9a56" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> StabilityMonitor:</span>
<span id="cb8-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, model, threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>):</span>
<span id="cb8-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model</span>
<span id="cb8-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threshold</span>
<span id="cb8-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-6">    </span>
<span id="cb8-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> check_stability(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, X, y, n_splits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb8-8">        <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> KFold</span>
<span id="cb8-9">        predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-10">        kf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KFold(n_splits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_splits, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-11">        </span>
<span id="cb8-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> train_idx, _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> kf.split(X):</span>
<span id="cb8-13">            X_subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[train_idx]</span>
<span id="cb8-14">            y_subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y[train_idx]</span>
<span id="cb8-15">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.fit(X_subset, y_subset)</span>
<span id="cb8-16">            predictions.append(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.predict(X))</span>
<span id="cb8-17">        </span>
<span id="cb8-18">        stability_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.std(predictions, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).mean()</span>
<span id="cb8-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.history.append(stability_score)</span>
<span id="cb8-20">        </span>
<span id="cb8-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> stability_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.threshold</span>
<span id="cb8-22"></span>
<span id="cb8-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb8-24">monitor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StabilityMonitor(Ridge(alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>))</span>
<span id="cb8-25">is_stable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> monitor.check_stability(X, y)</span>
<span id="cb8-26"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Model is stable: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>is_stable<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model is stable: True</code></pre>
</div>
</div>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ol type="1">
<li>Theory:
<ul>
<li>“Stability and Generalization” by Bousquet and Elisseeff</li>
<li>“Learning, Testing, and the Stability Approach” by Shalev-Shwartz et al.</li>
<li>“Stability and Learning Theory” by Mukherjee et al.</li>
</ul></li>
<li>Methods:
<ul>
<li>“Algorithmic Stability and Uniform Convergence” by Kearns and Ron</li>
<li>“Stability and Instance-Based Learning” by Devroye and Wagner</li>
<li>“Stable Learning Algorithms” by Kutin and Niyogi</li>
</ul></li>
<li>Applications:
<ul>
<li>“Stability in Machine Learning” by Hardt et al.</li>
<li>“Deep Learning and Stability” by Hardt and Ma</li>
<li>“Stability-Based Generalization Analysis” by Poggio et al.</li>
</ul></li>
</ol>


</section>
</section>

 ]]></description>
  <category>machine-learning</category>
  <category>theory</category>
  <category>mathematics</category>
  <category>stability</category>
  <guid>https://ram-polisetti.github.io/BendTheCurve/posts/algorithmic-stability/</guid>
  <pubDate>Tue, 19 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://ram-polisetti.github.io/BendTheCurve/posts/algorithmic-stability/stability.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>

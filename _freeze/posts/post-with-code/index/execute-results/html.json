{
  "hash": "c90beed223d5a05370fd4f8bae24f9e8",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Data Analysis with Python\"\nauthor: \"Ram Polisetti\"\ndate: \"2024-03-19\"\ncategories: [analysis, python, visualization]\nimage: \"image.jpg\"\n---\n\n\n# Data Analysis with Python Utilities\n\nIn this post, we'll demonstrate how to use our custom utility functions for data analysis and visualization. We'll analyze a sample dataset of daily temperature readings.\n\n## Setup\n\nFirst, let's import our utility functions and create some sample data:\n\n::: {#5ac49154 .cell execution_count=1}\n``` {.python .cell-code}\n# Add project root to Python path\nimport sys\nimport os\nsys.path.append('/Users/rampolisetti/Github/bendthecurve')\n\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta\nfrom utils.plotting import plot_distribution, time_series_plot\nfrom utils.data_prep import create_features\n\n# Create sample temperature data\nnp.random.seed(42)\ndates = pd.date_range(start='2023-01-01', end='2023-12-31', freq='D')\ntemperatures = np.random.normal(loc=20, scale=5, size=len(dates))\ntemperatures = temperatures + 10 * np.sin(np.arange(len(dates)) * 2 * np.pi / 365)  # Add seasonal pattern\n\n# Create DataFrame\ndf = pd.DataFrame({\n    'date': dates,\n    'temperature': temperatures\n})\n```\n:::\n\n\n## Data Analysis\n\nLet's analyze the distribution of temperatures and create some time-based features:\n\n::: {#b3683249 .cell execution_count=2}\n``` {.python .cell-code}\n# Plot temperature distribution\nfig1 = plot_distribution(\n    df['temperature'],\n    title='Distribution of Daily Temperatures',\n    xlabel='Temperature (째C)',\n    bins=30\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=808 height=523}\n:::\n:::\n\n\nNow, let's look at the time series with a 7-day moving average:\n\n::: {#63ed223e .cell execution_count=3}\n``` {.python .cell-code}\n# Create time series plot\nfig2 = time_series_plot(\n    df.set_index('date')['temperature'],\n    title='Daily Temperatures Over Time',\n    ylabel='Temperature (째C)',\n    rolling_window=7\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=957 height=559}\n:::\n:::\n\n\n## Feature Engineering\n\nWe can use our utility functions to create time-based features:\n\n::: {#684ebfbb .cell execution_count=4}\n``` {.python .cell-code}\n# Create time-based features\ndf_features = create_features(\n    df,\n    date_column='date',\n    cyclical_features=True\n)\n\n# Display the first few rows with new features\nprint(\"\\nDataFrame with engineered features:\")\nprint(df_features.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nDataFrame with engineered features:\n        date  temperature  year  month  day  day_of_week  month_sin  \\\n0 2023-01-01    22.483571  2023      1    1            6        0.5   \n1 2023-01-02    19.480812  2023      1    2            0        0.5   \n2 2023-01-03    23.582659  2023      1    3            1        0.5   \n3 2023-01-04    28.131346  2023      1    4            2        0.5   \n4 2023-01-05    19.517257  2023      1    5            3        0.5   \n\n   month_cos   dow_sin   dow_cos  \n0   0.866025 -0.781831  0.623490  \n1   0.866025  0.000000  1.000000  \n2   0.866025  0.781831  0.623490  \n3   0.866025  0.974928 -0.222521  \n4   0.866025  0.433884 -0.900969  \n```\n:::\n:::\n\n\n## Analysis of Seasonal Patterns\n\nLet's examine how temperature varies by month using a box plot:\n\n::: {#9be4e8cb .cell execution_count=5}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(12, 6))\nsns.boxplot(data=df_features, x='month', y='temperature')\nplt.title('Temperature Distribution by Month')\nplt.xlabel('Month')\nplt.ylabel('Temperature (째C)')\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nText(0, 0.5, 'Temperature (째C)')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-2.png){width=957 height=523}\n:::\n:::\n\n\n## Conclusion\n\nThis example demonstrates how our utility functions make it easy to:\n1. Create informative visualizations\n2. Add time-based features\n3. Analyze seasonal patterns\n\nIn future posts, we'll explore more advanced analyses using these utilities.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}
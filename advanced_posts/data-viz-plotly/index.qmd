---
title: "Interactive Data Visualization with Plotly"
author: "Ram Polisetti"
date: "2024-03-19"
categories: [data-science, python, tutorial, data-visualization]
image: "plotly_logo.png"
description: "Learn how to create interactive and engaging data visualizations using Plotly in Python."
---

# Interactive Data Visualization with Plotly

In this tutorial, we'll explore how to create interactive visualizations using Plotly, a powerful library that allows us to build web-based plots and dashboards.

## Setup

```{python}
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Set random seed for reproducibility
np.random.seed(42)

# Create sample dataset
n_samples = 1000
data = {
    'date': pd.date_range(start='2023-01-01', periods=n_samples, freq='D'),
    'sales': np.random.normal(1000, 200, n_samples) + np.sin(np.linspace(0, 10, n_samples)) * 100,
    'region': np.random.choice(['North', 'South', 'East', 'West'], n_samples),
    'product': np.random.choice(['A', 'B', 'C'], n_samples),
    'customer_satisfaction': np.random.normal(4, 0.5, n_samples).clip(1, 5),
    'units_sold': np.random.poisson(100, n_samples)
}

df = pd.DataFrame(data)
```

## Line Plot with Multiple Series

```{python}
# Create daily sales by region
daily_sales = df.groupby(['date', 'region'])['sales'].mean().reset_index()
daily_sales_wide = daily_sales.pivot(index='date', columns='region', values='sales')

# Create interactive line plot
fig = go.Figure()

for region in daily_sales_wide.columns:
    fig.add_trace(
        go.Scatter(
            x=daily_sales_wide.index,
            y=daily_sales_wide[region],
            name=region,
            mode='lines'
        )
    )

fig.update_layout(
    title='Daily Sales by Region',
    xaxis_title='Date',
    yaxis_title='Sales',
    hovermode='x unified'
)

fig.show()
```

## Interactive Scatter Plot

```{python}
# Create scatter plot of sales vs. customer satisfaction
fig = px.scatter(
    df,
    x='customer_satisfaction',
    y='sales',
    color='region',
    size='units_sold',
    hover_data=['product'],
    title='Sales vs. Customer Satisfaction'
)

fig.update_layout(
    xaxis_title='Customer Satisfaction',
    yaxis_title='Sales'
)

fig.show()
```

## Animated Bubble Chart

```{python}
# Create monthly aggregates
df['month'] = df['date'].dt.to_period('M')
monthly_stats = df.groupby(['month', 'region', 'product']).agg({
    'sales': 'sum',
    'units_sold': 'sum',
    'customer_satisfaction': 'mean'
}).reset_index()
monthly_stats['month'] = monthly_stats['month'].astype(str)

# Create animated bubble chart
fig = px.scatter(
    monthly_stats,
    x='sales',
    y='customer_satisfaction',
    size='units_sold',
    color='region',
    animation_frame='month',
    hover_name='product',
    title='Monthly Sales Performance'
)

fig.update_layout(
    xaxis_title='Total Sales',
    yaxis_title='Average Customer Satisfaction'
)

fig.show()
```

## Interactive Heatmap

```{python}
# Create correlation matrix
numeric_cols = ['sales', 'customer_satisfaction', 'units_sold']
corr_matrix = df[numeric_cols].corr()

# Create heatmap
fig = go.Figure(data=go.Heatmap(
    z=corr_matrix,
    x=corr_matrix.columns,
    y=corr_matrix.columns,
    text=np.round(corr_matrix, 2),
    texttemplate='%{text}',
    textfont={'size': 12},
    hoverongaps=False,
    colorscale='RdBu'
))

fig.update_layout(
    title='Correlation Heatmap',
    width=600,
    height=600
)

fig.show()
```

## Box Plots with Violin Overlay

```{python}
# Create box plots with violin overlay
fig = go.Figure()

for region in df['region'].unique():
    # Add violin plot
    fig.add_trace(go.Violin(
        x=df['region'][df['region'] == region],
        y=df['sales'][df['region'] == region],
        name=region,
        box_visible=True,
        meanline_visible=True
    ))

fig.update_layout(
    title='Sales Distribution by Region',
    xaxis_title='Region',
    yaxis_title='Sales',
    showlegend=False
)

fig.show()
```

## 3D Scatter Plot

```{python}
# Create 3D scatter plot
fig = px.scatter_3d(
    df,
    x='sales',
    y='customer_satisfaction',
    z='units_sold',
    color='region',
    symbol='product',
    title='Sales Performance in 3D'
)

fig.update_layout(
    scene=dict(
        xaxis_title='Sales',
        yaxis_title='Customer Satisfaction',
        zaxis_title='Units Sold'
    )
)

fig.show()
```

## Key Takeaways

In this tutorial, we learned how to create:

1. Interactive line plots with multiple series
2. Scatter plots with hover information
3. Animated bubble charts
4. Interactive heatmaps
5. Box plots with violin overlays
6. 3D scatter plots

These interactive visualizations can help you:
- Explore relationships in your data
- Identify patterns and trends
- Communicate insights effectively
- Create engaging presentations

In future posts, we'll explore:
- Custom themes and styling
- Advanced Plotly features
- Building dashboards with Dash
- Real-time data visualization

Stay tuned!
